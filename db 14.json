{"meta":{"version":1,"warehouse":"3.0.2"},"models":{"Asset":[{"_id":"source/CNAME","path":"CNAME","modified":1,"renderable":0},{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":1,"renderable":1},{"_id":"themes/next/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/apple-touch-icon-next.png","path":"images/apple-touch-icon-next.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/favicon-16x16-next.png","path":"images/favicon-16x16-next.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/favicon-32x32-next.png","path":"images/favicon-32x32-next.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/favicon.svg","path":"images/favicon.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/loading.gif","path":"images/loading.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/logo.svg","path":"images/logo.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/placeholder.gif","path":"images/placeholder.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/quote-l.svg","path":"images/quote-l.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/quote-r.svg","path":"images/quote-r.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/searchicon.png","path":"images/searchicon.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/smile.png","path":"images/smile.png","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/affix.js","path":"js/src/affix.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/algolia-search.js","path":"js/src/algolia-search.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/exturl.js","path":"js/src/exturl.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/bootstrap.js","path":"js/src/bootstrap.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/hook-duoshuo.js","path":"js/src/hook-duoshuo.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/js.cookie.js","path":"js/src/js.cookie.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/motion.js","path":"js/src/motion.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/post-details.js","path":"js/src/post-details.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/scroll-cookie.js","path":"js/src/scroll-cookie.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/scrollspy.js","path":"js/src/scrollspy.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/utils.js","path":"js/src/utils.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/canvas-ribbon/canvas-ribbon.js","path":"lib/canvas-ribbon/canvas-ribbon.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","path":"lib/canvas-nest/canvas-nest.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","path":"lib/algolia-instant-search/instantsearch.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/LICENSE","path":"lib/fastclick/LICENSE","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/README.md","path":"lib/fastclick/README.md","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/bower.json","path":"lib/fastclick/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","path":"lib/font-awesome/HELP-US-OUT.txt","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/bower.json","path":"lib/font-awesome/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","path":"lib/jquery_lazyload/CONTRIBUTING.md","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","path":"lib/jquery_lazyload/README.md","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","path":"lib/jquery_lazyload/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","path":"lib/jquery_lazyload/jquery.lazyload.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","path":"lib/jquery_lazyload/jquery.scrollstop.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.css","path":"lib/needsharebutton/needsharebutton.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/needsharebutton/font-embedded.css","path":"lib/needsharebutton/font-embedded.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.js","path":"lib/needsharebutton/needsharebutton.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-barber-shop.min.css","path":"lib/pace/pace-theme-barber-shop.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-big-counter.min.css","path":"lib/pace/pace-theme-big-counter.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-bounce.min.css","path":"lib/pace/pace-theme-bounce.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-atom.min.css","path":"lib/pace/pace-theme-center-atom.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-radar.min.css","path":"lib/pace/pace-theme-center-radar.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-circle.min.css","path":"lib/pace/pace-theme-center-circle.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-simple.min.css","path":"lib/pace/pace-theme-center-simple.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-corner-indicator.min.css","path":"lib/pace/pace-theme-corner-indicator.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-fill-left.min.css","path":"lib/pace/pace-theme-fill-left.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-flash.min.css","path":"lib/pace/pace-theme-flash.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-loading-bar.min.css","path":"lib/pace/pace-theme-loading-bar.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-mac-osx.min.css","path":"lib/pace/pace-theme-mac-osx.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-minimal.min.css","path":"lib/pace/pace-theme-minimal.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/bower.json","path":"lib/velocity/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace.min.js","path":"lib/pace/pace.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","path":"lib/velocity/velocity.ui.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/three/canvas_lines.min.js","path":"lib/three/canvas_lines.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/three/three-waves.min.js","path":"lib/three/three-waves.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/three/canvas_sphere.min.js","path":"lib/three/canvas_sphere.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery/index.js","path":"lib/jquery/index.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/schemes/pisces.js","path":"js/src/schemes/pisces.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.css","path":"lib/Han/dist/han.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.min.css","path":"lib/Han/dist/han.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.min.js","path":"lib/Han/dist/han.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","path":"lib/fancybox/source/blank.gif","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","path":"lib/fancybox/source/fancybox_loading.gif","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","path":"lib/fancybox/source/fancybox_loading@2x.gif","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","path":"lib/fancybox/source/fancybox_overlay.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","path":"lib/fancybox/source/fancybox_sprite.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","path":"lib/fancybox/source/fancybox_sprite@2x.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","path":"lib/fancybox/source/jquery.fancybox.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","path":"lib/fancybox/source/jquery.fancybox.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","path":"lib/fancybox/source/jquery.fancybox.pack.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","path":"lib/fastclick/lib/fastclick.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","path":"lib/fastclick/lib/fastclick.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","path":"lib/font-awesome/css/font-awesome.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","path":"lib/font-awesome/css/font-awesome.css.map","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","path":"lib/font-awesome/css/font-awesome.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","path":"lib/ua-parser-js/dist/ua-parser.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","path":"lib/ua-parser-js/dist/ua-parser.pack.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.js","path":"lib/Han/dist/han.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","path":"lib/font-awesome/fonts/fontawesome-webfont.woff","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","path":"lib/font-awesome/fonts/fontawesome-webfont.woff2","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.js","path":"lib/velocity/velocity.js","modified":1,"renderable":1},{"_id":"themes/next/source/images/avatar_2.gif","path":"images/avatar_2.gif","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han-space.otf","path":"lib/Han/dist/font/han-space.otf","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han-space.woff","path":"lib/Han/dist/font/han-space.woff","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.woff","path":"lib/Han/dist/font/han.woff","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.otf","path":"lib/Han/dist/font/han.otf","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.woff2","path":"lib/Han/dist/font/han.woff2","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","path":"lib/fancybox/source/helpers/fancybox_buttons.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","path":"lib/fancybox/source/helpers/jquery.fancybox-media.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","path":"lib/font-awesome/fonts/fontawesome-webfont.ttf","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","path":"lib/font-awesome/fonts/FontAwesome.otf","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","path":"lib/font-awesome/fonts/fontawesome-webfont.eot","modified":1,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","path":"lib/algolia-instant-search/instantsearch.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/three/three.min.js","path":"lib/three/three.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","path":"lib/font-awesome/fonts/fontawesome-webfont.svg","modified":1,"renderable":1}],"Cache":[{"_id":"source/CNAME","hash":"012e2c960e6590e339af6e0b980233583b178c8f","modified":1596272966525},{"_id":"source/.DS_Store","hash":"6974ddb0953597b845d10c3aec9016f9ed161fbb","modified":1596074675396},{"_id":"themes/next/.bowerrc","hash":"3228a58ed0ece9f85e1e3136352094080b8dece1","modified":1595935344689},{"_id":"themes/next/.editorconfig","hash":"792fd2bd8174ece1a75d5fd24ab16594886f3a7f","modified":1595935344690},{"_id":"themes/next/.gitignore","hash":"0b5c2ffd41f66eb1849d6426ba8cf9649eeed329","modified":1595935344690},{"_id":"themes/next/.gitattributes","hash":"44bd4729c74ccb88110804f41746fec07bf487d4","modified":1595935344690},{"_id":"themes/next/.hound.yml","hash":"b76daa84c9ca3ad292c78412603370a367cc2bc3","modified":1595935344690},{"_id":"themes/next/.jshintrc","hash":"9928f81bd822f6a8d67fdbc909b517178533bca9","modified":1595935344691},{"_id":"themes/next/.javascript_ignore","hash":"8a224b381155f10e6eb132a4d815c5b52962a9d1","modified":1595935344690},{"_id":"themes/next/.stylintrc","hash":"b28e24704a5d8de08346c45286574c8e76cc109f","modified":1595935344691},{"_id":"themes/next/.DS_Store","hash":"460c137531b172d678da3fd76c462c86fb5d4570","modified":1596005020124},{"_id":"themes/next/.travis.yml","hash":"d60d4a5375fea23d53b2156b764a99b2e56fa660","modified":1595935344691},{"_id":"themes/next/LICENSE","hash":"f293bcfcdc06c0b77ba13570bb8af55eb5c059fd","modified":1595935344691},{"_id":"themes/next/_config.yml","hash":"377fbf1815ae82d8d6a258d86a976f6f9fc70a1f","modified":1596000310000},{"_id":"themes/next/README.cn.md","hash":"263b74f1ac7c0f6f9424b8cced4b0b320ae61efc","modified":1595935344691},{"_id":"themes/next/package.json","hash":"036d3a1346203d2f1a3958024df7f74e7ac07bfe","modified":1595935344712},{"_id":"themes/next/README.md","hash":"287c7e6b7a6ddf75d815dda0df8bd228e3f285c5","modified":1595935344692},{"_id":"source/_posts/Binary-Search.md","hash":"33283fa3d92ffc3cc15060eab3349175926e8962","modified":1596421512592},{"_id":"themes/next/gulpfile.coffee","hash":"031bffc483e417b20e90eceb6cf358e7596d2e69","modified":1595935344692},{"_id":"themes/next/bower.json","hash":"0674f11d3d514e087a176da0e1d85c2286aa5fba","modified":1595935344692},{"_id":"source/_posts/Dynamic-Programming.md","hash":"d2c5a96735c7c44dba9a9e2b0eb26dd27037952a","modified":1597656041238},{"_id":"source/_posts/Greedy-Algorithm.md","hash":"d31c5d163b496a461411f5da93738b5c98e706df","modified":1596422580597},{"_id":"source/_posts/Permutations-Combinations-Subsets.md","hash":"4d3f3d0018dea5f85151840ee89306d756a7e96e","modified":1596597458792},{"_id":"source/_posts/String.md","hash":"898489a1bf09ae878f6feedd6b7bedb14a927065","modified":1597656011526},{"_id":"source/_posts/Two-Pointers.md","hash":"fae8470a10dcbde99bbe89f977188b0bcf65af41","modified":1596622208110},{"_id":"source/_posts/Vue-Learning.md","hash":"f79ee23db18f94109118cf75beb8ce79f1050c5a","modified":1596001105879},{"_id":"source/_posts/hello-world.md","hash":"372b7083163ddf84cc7fc3d116675c6810cc2715","modified":1595949845684},{"_id":"source/about/index.md","hash":"2d7e70746cd45ec9d38467b29b0b0f4b99fa05b2","modified":1595987406708},{"_id":"source/categories/index.md","hash":"1b87b5e655ba8858f2e12c6e6e40b7c54e73fc62","modified":1595987414660},{"_id":"source/tags/index.md","hash":"c6be348a100c4a59037a055ddce675ef1f932b9a","modified":1595989721648},{"_id":"themes/next/.github/CONTRIBUTING.md","hash":"3b5eafd32abb718e56ccf8d1cee0607ad8ce611d","modified":1595935344690},{"_id":"themes/next/.github/ISSUE_TEMPLATE.md","hash":"50d48c47162817a3810a9d9ad51104e83947419a","modified":1595935344690},{"_id":"themes/next/.github/PULL_REQUEST_TEMPLATE.md","hash":"902f627155a65099e0a37842ff396a58d0dc306f","modified":1595935344690},{"_id":"themes/next/.github/browserstack_logo.png","hash":"a6c43887f64a7f48a2814e3714eaa1215e542037","modified":1595935344690},{"_id":"themes/next/scripts/merge-configs.js","hash":"81e86717ecfb775986b945d17f0a4ba27532ef07","modified":1595935344712},{"_id":"themes/next/layout/_layout.swig","hash":"da0929166674ea637e0ad454f85ad0d7bac4aff2","modified":1595935344695},{"_id":"themes/next/layout/archive.swig","hash":"f0a8225feafd971419837cdb4bcfec98a4a59b2f","modified":1595935344710},{"_id":"themes/next/layout/category.swig","hash":"4472255f4a3e3dd6d79201523a9526dcabdfbf18","modified":1595935344711},{"_id":"themes/next/layout/index.swig","hash":"783611349c941848a0e26ee2f1dc44dd14879bd1","modified":1595935344711},{"_id":"themes/next/layout/page.swig","hash":"969caaee05bdea725e99016eb63d810893a73e99","modified":1595935344711},{"_id":"themes/next/layout/post.swig","hash":"b3589a8e46288a10d20e41c7a5985d2493725aec","modified":1595935344711},{"_id":"themes/next/layout/schedule.swig","hash":"d86f8de4e118f8c4d778b285c140474084a271db","modified":1595935344711},{"_id":"themes/next/layout/tag.swig","hash":"7e0a7d7d832883eddb1297483ad22c184e4368de","modified":1595935344712},{"_id":"themes/next/languages/de.yml","hash":"057e7df11ddeb1c8c15a5d7c5ff29430d725ec6b","modified":1595935344692},{"_id":"themes/next/languages/default.yml","hash":"44ef3f26917f467459326c2c8be2f73e4d947f35","modified":1595935344692},{"_id":"themes/next/languages/en.yml","hash":"7e680d9bb8f3a3a9d1ba1c9d312b3d257183dded","modified":1595935344693},{"_id":"themes/next/languages/fr-FR.yml","hash":"7e4eb7011b8feee641cfb11c6e73180b0ded1c0f","modified":1595935344693},{"_id":"themes/next/languages/id.yml","hash":"b5de1ea66dd9ef54cac9a1440eaa4e3f5fc011f5","modified":1595935344693},{"_id":"themes/next/languages/it.yml","hash":"aa595f2bda029f73ef7bfa104b4c55c3f4e9fb4c","modified":1595935344693},{"_id":"themes/next/languages/ja.yml","hash":"3c76e16fd19b262864475faa6854b718bc08c4d8","modified":1595935344693},{"_id":"themes/next/languages/ko.yml","hash":"ea5b46056e73ebcee121d5551627af35cbffc900","modified":1595935344693},{"_id":"themes/next/languages/nl-NL.yml","hash":"edca4f3598857dbc3cbf19ed412213329b6edd47","modified":1595935344693},{"_id":"themes/next/languages/pt-BR.yml","hash":"b1694ae766ed90277bcc4daca4b1cfa19cdcb72b","modified":1595935344694},{"_id":"themes/next/languages/pt.yml","hash":"44b61f2d085b827b507909a0b8f8ce31c6ef5d04","modified":1595935344694},{"_id":"themes/next/languages/ru.yml","hash":"98ec6f0b7183282e11cffc7ff586ceb82400dd75","modified":1595935344694},{"_id":"themes/next/languages/vi.yml","hash":"fd08d3c8d2c62965a98ac420fdaf95e54c25d97c","modified":1595935344694},{"_id":"themes/next/languages/zh-Hans.yml","hash":"16ef56d0dea94638de7d200984c90ae56f26b4fe","modified":1595935344694},{"_id":"themes/next/languages/zh-hk.yml","hash":"9396f41ae76e4fef99b257c93c7354e661f6e0fa","modified":1595935344694},{"_id":"themes/next/languages/zh-tw.yml","hash":"50b71abb3ecc0686f9739e179e2f829cd074ecd9","modified":1595935344695},{"_id":"themes/next/source/.DS_Store","hash":"17bb53c35137ebfd9ca1e7e1554acab03b301abb","modified":1596072478586},{"_id":"themes/next/test/helpers.js","hash":"a1f5de25154c3724ffc24a91ddc576cdbd60864f","modified":1595935344807},{"_id":"source/_posts/Greedy-Algorithm/largen-reach.png","hash":"65c5fe4cc7c549e23886375132e006ffb2e8e881","modified":1596421177972},{"_id":"themes/next/test/intern.js","hash":"11fa8a4f5c3b4119a179ae0a2584c8187f907a73","modified":1595935344807},{"_id":"themes/next/test/.jshintrc","hash":"19f93d13d1689fe033c82eb2d5f3ce30b6543cc0","modified":1595935344806},{"_id":"themes/next/scripts/merge.js","hash":"9130dabe6a674c54b535f322b17d75fe6081472f","modified":1595935344713},{"_id":"themes/next/source/fonts/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1595935344743},{"_id":"source/_posts/Greedy-Algorithm/45_fig1.png","hash":"c263da40f4a55cad4e6b21c80d7e8849ef7ccec5","modified":1596421172153},{"_id":"source/_posts/Permutations-Combinations-Subsets/bitmask4.png","hash":"2c12dfaeec5c2e250853a9beaa39ab495568d815","modified":1596442574614},{"_id":"themes/next/scripts/tags/button.js","hash":"d023f10a00077f47082b0517e2ad666e6e994f60","modified":1595935344714},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"535fc542781021c4326dec24d8495cbb1387634a","modified":1595935344714},{"_id":"themes/next/scripts/tags/exturl.js","hash":"8d7e60f60779bde050d20fd76f6fdc36fc85e06d","modified":1595935344715},{"_id":"themes/next/scripts/tags/full-image.js","hash":"8eeb3fb89540299bdbb799edfdfdac3743b50596","modified":1595935344715},{"_id":"themes/next/scripts/tags/label.js","hash":"2f8f41a7316372f0d1ed6b51190dc4acd3e16fff","modified":1595935344716},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"49252824cd53184dc9b97b2f2d87ff28e1b3ef27","modified":1595935344715},{"_id":"themes/next/scripts/tags/lazy-image.js","hash":"eeeabede68cf263de9e6593ecf682f620da16f0a","modified":1595935344716},{"_id":"themes/next/scripts/tags/note.js","hash":"64de4e9d01cf3b491ffc7d53afdf148ee5ad9779","modified":1595935344716},{"_id":"themes/next/scripts/tags/tabs.js","hash":"5786545d51c38e8ca38d1bfc7dd9e946fc70a316","modified":1595935344717},{"_id":"themes/next/layout/_custom/header.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1595935344695},{"_id":"themes/next/layout/_custom/sidebar.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1595935344695},{"_id":"themes/next/layout/_macro/post-copyright.swig","hash":"665a928604f99d2ba7dc4a4a9150178229568cc6","modified":1595935344696},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"31322a7f57936cf2dc62e824af5490da5354cf02","modified":1595935344696},{"_id":"themes/next/layout/_macro/post.swig","hash":"e0df0ec78bbe39ddeb77c6e98dcd93dfb8c5e1a0","modified":1595952097992},{"_id":"themes/next/layout/_macro/reward.swig","hash":"56e8d8556cf474c56ae1bef9cb7bbd26554adb07","modified":1595935344696},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"d68b43edfc2dd23a50f68efddba6bbbd3444c0c0","modified":1595988767150},{"_id":"themes/next/layout/_macro/wechat-subscriber.swig","hash":"39852700e4084ecccffa6d4669168e5cc0514c9e","modified":1595935344697},{"_id":"themes/next/layout/_partials/comments.swig","hash":"4a6f5b1792b2e5262b7fdab9a716b3108e2f09c7","modified":1595935344697},{"_id":"themes/next/layout/_partials/footer.swig","hash":"1599590902843c1061134d43788ffff51ec2de0f","modified":1595948088019},{"_id":"themes/next/layout/_partials/head.swig","hash":"6b94fe8f3279daea5623c49ef4bb35917ba57510","modified":1595935344697},{"_id":"themes/next/layout/_partials/header.swig","hash":"ed042be6252848058c90109236ec988e392d91d4","modified":1595935344698},{"_id":"themes/next/layout/_partials/page-header.swig","hash":"1efd925d34a5d4ba2dc0838d9c86ba911e705fc9","modified":1595935344698},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"9e8e21d194ef44d271b1cca0bc1448c14d7edf4f","modified":1595935344698},{"_id":"themes/next/layout/_partials/search.swig","hash":"9dbd378e94abfcb3f864a5b8dbbf18d212ca2ee0","modified":1595935344698},{"_id":"themes/next/layout/_scripts/boostrap.swig","hash":"03aaebe9d50f6acb007ec38cc04acd1cfceb404d","modified":1595935344701},{"_id":"themes/next/layout/_scripts/commons.swig","hash":"766b2bdda29523ed6cd8d7aa197f996022f8fd94","modified":1595935344701},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"a266f96ad06ee87bdeae6e105a4b53cd587bbd04","modified":1595935344702},{"_id":"themes/next/layout/_third-party/duoshuo-hot-articles.swig","hash":"5d4638c46aef65bf32a01681495b62416ccc98db","modified":1595935344707},{"_id":"themes/next/layout/_third-party/exturl.swig","hash":"7c04a42319d728be356746363aff8ea247791d24","modified":1595935344707},{"_id":"themes/next/layout/_third-party/mathjax.swig","hash":"6d25596d6a7c57700d37b607f8d9a62d89708683","modified":1595935344708},{"_id":"themes/next/layout/_third-party/rating.swig","hash":"fc93b1a7e6aed0dddb1f3910142b48d8ab61174e","modified":1595935344708},{"_id":"themes/next/layout/_third-party/needsharebutton.swig","hash":"5fe0447cc88a5a63b530cf0426f93c4634811876","modified":1595935344708},{"_id":"themes/next/layout/_third-party/schedule.swig","hash":"22369026c87fc23893c35a7f250b42f3bb1b60f1","modified":1595935344708},{"_id":"themes/next/layout/_third-party/scroll-cookie.swig","hash":"1ddb2336a1a19b47af3017047012c01ec5f54529","modified":1595935344708},{"_id":"themes/next/source/css/main.styl","hash":"20702c48d6053c92c5bcdbc68e8d0ef1369848a0","modified":1595935344743},{"_id":"themes/next/source/images/algolia_logo.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1595935344744},{"_id":"themes/next/source/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1595935344744},{"_id":"themes/next/source/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1595935344000},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1595935344745},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1595935344745},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1595935344745},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1595935344745},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1595935344746},{"_id":"themes/next/source/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1595935344746},{"_id":"themes/next/source/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1595935344747},{"_id":"themes/next/source/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1595935344746},{"_id":"themes/next/source/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1595935344747},{"_id":"themes/next/source/images/favicon.svg","hash":"d86c042282707c4768d903afd6f0791dd103b1c7","modified":1595948609236},{"_id":"themes/next/source/images/.DS_Store","hash":"7e650f566e97d0f9fc048e610521fa24d2e66d85","modified":1595991691968},{"_id":"themes/next/source/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1595935344747},{"_id":"themes/next/source/images/logo.svg","hash":"d29cacbae1bdc4bbccb542107ee0524fe55ad6de","modified":1595935344747},{"_id":"themes/next/source/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1595935344747},{"_id":"themes/next/source/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1595935344748},{"_id":"themes/next/source/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1595935344748},{"_id":"themes/next/source/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1595935344748},{"_id":"themes/next/source/images/smile.png","hash":"437533897dc8fbf6e68c195dd758cd1a2001c8dc","modified":1595948771356},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1595935344702},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1595935344702},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1595935344742},{"_id":"themes/next/source/css/_variables/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1595935344743},{"_id":"themes/next/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1595935344736},{"_id":"themes/next/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1595935344736},{"_id":"themes/next/source/css/_mixins/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1595935344737},{"_id":"themes/next/layout/_partials/head/custom-head.swig","hash":"9e1b9666efa77f4cf8d8261bcfa445a9ac608e53","modified":1595935344697},{"_id":"themes/next/layout/_partials/head/external-fonts.swig","hash":"7ce76358411184482bb0934e70037949dd0da8ca","modified":1595935344698},{"_id":"themes/next/layout/_partials/share/add-this.swig","hash":"23e23dc0f76ef3c631f24c65277adf7ea517b383","modified":1595935344699},{"_id":"themes/next/layout/_partials/share/baidushare.swig","hash":"1f1107468aaf03f7d0dcd7eb2b653e2813a675b4","modified":1595935344700},{"_id":"themes/next/layout/_partials/share/duoshuo_share.swig","hash":"89c5a5240ecb223acfe1d12377df5562a943fd5d","modified":1595935344700},{"_id":"themes/next/layout/_partials/share/jiathis.swig","hash":"048fd5e98149469f8c28c21ba3561a7a67952c9b","modified":1595935344700},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"957701729b85fb0c5bfcf2fb99c19d54582f91ed","modified":1595935344699},{"_id":"themes/next/layout/_partials/search/swiftype.swig","hash":"959b7e04a96a5596056e4009b73b6489c117597e","modified":1595935344699},{"_id":"themes/next/layout/_partials/search/tinysou.swig","hash":"eefe2388ff3d424694045eda21346989b123977c","modified":1595935344699},{"_id":"themes/next/layout/_scripts/pages/post-details.swig","hash":"069d1357c717572256e5cdee09574ebce529cbae","modified":1595935344701},{"_id":"themes/next/layout/_scripts/schemes/gemini.swig","hash":"a44acf9b0d0f44ef3dfc767376a95c984cc127de","modified":1595935344702},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"a44acf9b0d0f44ef3dfc767376a95c984cc127de","modified":1595935344702},{"_id":"themes/next/layout/_third-party/analytics/analytics-with-widget.swig","hash":"98df9d72e37dd071e882f2d5623c9d817815b139","modified":1595935344703},{"_id":"themes/next/layout/_third-party/analytics/application-insights.swig","hash":"60426bf73f8a89ba61fb1be2df3ad5398e32c4ef","modified":1595935344703},{"_id":"themes/next/layout/_third-party/analytics/baidu-analytics.swig","hash":"deda6a814ed48debc694c4e0c466f06c127163d0","modified":1595935344703},{"_id":"themes/next/layout/_third-party/analytics/busuanzi-counter.swig","hash":"18e7bef8923d83ea42df6c97405e515a876cede4","modified":1595935344703},{"_id":"themes/next/layout/_third-party/analytics/cnzz-analytics.swig","hash":"8160b27bee0aa372c7dc7c8476c05bae57f58d0f","modified":1595935344703},{"_id":"themes/next/layout/_third-party/analytics/facebook-sdk.swig","hash":"a234c5cd1f75ca5731e814d0dbb92fdcf9240d1b","modified":1595935344704},{"_id":"themes/next/layout/_third-party/analytics/firestore.swig","hash":"1cd01c6e92ab1913d48e556a92bb4f28b6dc4996","modified":1595935344704},{"_id":"themes/next/layout/_third-party/analytics/google-analytics.swig","hash":"5d9943d74cc2e0a91badcf4f755c6de77eab193a","modified":1595935344704},{"_id":"themes/next/layout/_third-party/analytics/index.swig","hash":"5e9bb24c750b49513d9a65799e832f07410002ac","modified":1595935344704},{"_id":"themes/next/layout/_third-party/analytics/lean-analytics.swig","hash":"fc65b9c98a0a8ab43a5e7aabff6c5f03838e09c8","modified":1595935344704},{"_id":"themes/next/layout/_third-party/analytics/tencent-analytics.swig","hash":"3658414379e0e8a34c45c40feadc3edc8dc55f88","modified":1595935344705},{"_id":"themes/next/layout/_third-party/analytics/tencent-mta.swig","hash":"0ddc94ed4ba0c19627765fdf1abc4d8efbe53d5a","modified":1595935344705},{"_id":"themes/next/layout/_third-party/analytics/vkontakte-api.swig","hash":"c3971fd154d781088e1cc665035f8561a4098f4c","modified":1595935344705},{"_id":"themes/next/layout/_third-party/comments/changyan.swig","hash":"0e3378f7c39b2b0f69638290873ede6b6b6825c0","modified":1595935344705},{"_id":"themes/next/layout/_third-party/comments/disqus.swig","hash":"c316758546dc9ba6c60cb4d852c17ca6bb6d6724","modified":1595935344705},{"_id":"themes/next/layout/_third-party/comments/duoshuo.swig","hash":"a356b2185d40914447fde817eb3d358ab6b3e4c3","modified":1595935344706},{"_id":"themes/next/layout/_third-party/comments/gitment.swig","hash":"10160daceaa6f1ecf632323d422ebe2caae49ddf","modified":1595935344706},{"_id":"themes/next/layout/_third-party/comments/hypercomments.swig","hash":"3e8dc5c6c912628a37e3b5f886bec7b2e5ed14ea","modified":1595935344706},{"_id":"themes/next/layout/_third-party/comments/index.swig","hash":"aa0629277d751c55c6d973e7691bf84af9b17a60","modified":1595935344706},{"_id":"themes/next/layout/_third-party/comments/livere.swig","hash":"8a2e393d2e49f7bf560766d8a07cd461bf3fce4f","modified":1595935344706},{"_id":"themes/next/layout/_third-party/comments/valine.swig","hash":"fcabbb241f894c9a6309c44e126cf3e8fea81fd4","modified":1595935344707},{"_id":"themes/next/layout/_third-party/comments/youyan.swig","hash":"8b6650f77fe0a824c8075b2659e0403e0c78a705","modified":1595935344707},{"_id":"themes/next/layout/_third-party/search/index.swig","hash":"c747fb5c6b1f500e8f0c583e44195878b66e4e29","modified":1595935344709},{"_id":"themes/next/layout/_third-party/search/localsearch.swig","hash":"385c066af96bee30be2459dbec8aae1f15d382f5","modified":1595935344709},{"_id":"themes/next/layout/_third-party/search/tinysou.swig","hash":"cb3a5d36dbe1630bab84e03a52733a46df7c219b","modified":1595935344710},{"_id":"themes/next/layout/_third-party/seo/baidu-push.swig","hash":"c057b17f79e8261680fbae8dc4e81317a127c799","modified":1595935344710},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"f29165e36489a87ba32d17dddfd2720d84e3f3ec","modified":1595935344743},{"_id":"themes/next/source/css/_variables/base.styl","hash":"29c261fa6b4046322559074d75239c6b272fb8a3","modified":1595935344743},{"_id":"themes/next/source/css/_custom/custom.styl","hash":"a9afe2a22fe0ad1e285650e28c4d326fc8b94413","modified":1595948139365},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"be087dcc060e8179f7e7f60ab4feb65817bd3d9f","modified":1595935344742},{"_id":"themes/next/source/css/_variables/Gemini.styl","hash":"99fbb4686ea9a3e03a4726ed7cf4d8f529034452","modified":1595935344742},{"_id":"themes/next/source/css/_mixins/Pisces.styl","hash":"9ab65361ba0a12a986edd103e56492644c2db0b8","modified":1595935344736},{"_id":"themes/next/source/css/_mixins/base.styl","hash":"82f9055955920ed88a2ab6a20ab02169abb2c634","modified":1595935344737},{"_id":"themes/next/source/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1595935344748},{"_id":"themes/next/source/css/_mixins/Gemini.styl","hash":"2aa5b7166a85a8aa34b17792ae4f58a5a96df6cc","modified":1595935344736},{"_id":"themes/next/source/js/src/algolia-search.js","hash":"b172f697ed339a24b1e80261075232978d164c35","modified":1595935344749},{"_id":"themes/next/source/js/src/exturl.js","hash":"e42e2aaab7bf4c19a0c8e779140e079c6aa5c0b1","modified":1595935344749},{"_id":"themes/next/source/js/src/bootstrap.js","hash":"034bc8113e0966fe2096ba5b56061bbf10ef0512","modified":1595935344749},{"_id":"themes/next/source/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1595935344749},{"_id":"themes/next/source/js/src/js.cookie.js","hash":"9b37973a90fd50e71ea91682265715e45ae82c75","modified":1595935344750},{"_id":"themes/next/source/js/src/motion.js","hash":"754b294394f102c8fd9423a1789ddb1201677898","modified":1595935344750},{"_id":"themes/next/source/js/src/post-details.js","hash":"a13f45f7aa8291cf7244ec5ba93907d119c5dbdd","modified":1595935344750},{"_id":"themes/next/source/js/src/scroll-cookie.js","hash":"09dc828cbf5f31158ff6250d2bf7c3cde6365c67","modified":1595935344751},{"_id":"themes/next/source/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1595935344751},{"_id":"themes/next/source/js/src/utils.js","hash":"9b1325801d27213083d1487a12b1a62b539ab6f8","modified":1595935344752},{"_id":"themes/next/source/lib/canvas-ribbon/canvas-ribbon.js","hash":"ff5915eb2596e890a2fc6697c864f861a1995ec0","modified":1595935344761},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1595935344760},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1595935344756},{"_id":"themes/next/source/lib/fastclick/LICENSE","hash":"dcd5b6b43095d9e90353a28b09cb269de8d4838e","modified":1595935344768},{"_id":"themes/next/source/lib/fastclick/README.md","hash":"1decd8e1adad2cd6db0ab50cf56de6035156f4ea","modified":1595935344768},{"_id":"themes/next/source/lib/fancybox/.bower.json","hash":"cc40a9b11e52348e554c84e4a5c058056f6b7aeb","modified":1595935344762},{"_id":"themes/next/source/lib/fancybox/.gitattributes","hash":"2db21acfbd457452462f71cc4048a943ee61b8e0","modified":1595935344762},{"_id":"themes/next/source/lib/fastclick/.bower.json","hash":"93ebd5b35e632f714dcf1753e1f6db77ec74449b","modified":1595935344767},{"_id":"themes/next/source/lib/fastclick/bower.json","hash":"13379463c7463b4b96d13556b46faa4cc38d81e6","modified":1595935344768},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","hash":"4f7bf961f1bed448f6ba99aeb9219fabf930ba96","modified":1595935344775},{"_id":"themes/next/source/lib/font-awesome/bower.json","hash":"279a8a718ab6c930a67c41237f0aac166c1b9440","modified":1595935344776},{"_id":"themes/next/source/lib/font-awesome/.bower.json","hash":"a2aaaf12378db56bd10596ba3daae30950eac051","modified":1595935344773},{"_id":"themes/next/source/lib/font-awesome/.gitignore","hash":"69d152fa46b517141ec3b1114dd6134724494d83","modified":1595935344774},{"_id":"themes/next/source/lib/font-awesome/.npmignore","hash":"dcf470ab3a358103bb896a539cc03caeda10fa8b","modified":1595935344775},{"_id":"themes/next/source/lib/jquery/.bower.json","hash":"91745c2cc6c946c7275f952b2b0760b880cea69e","modified":1595935344789},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","hash":"4891864c24c28efecd81a6a8d3f261145190f901","modified":1595935344791},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","hash":"895d50fa29759af7835256522e9dd7dac597765c","modified":1595935344791},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","hash":"65bc85d12197e71c40a55c0cd7f6823995a05222","modified":1595935344791},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1595935344791},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1595935344792},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.css","hash":"3ef0020a1815ca6151ea4886cd0d37421ae3695c","modified":1595935344792},{"_id":"themes/next/source/lib/needsharebutton/font-embedded.css","hash":"c39d37278c1e178838732af21bd26cd0baeddfe0","modified":1595935344792},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.js","hash":"9885fd9bea5e7ebafc5b1de9d17be5e106248d96","modified":1595935344793},{"_id":"themes/next/source/lib/pace/pace-theme-barber-shop.min.css","hash":"ee0d51446cb4ffe1bb96bd7bc8c8e046dddfcf46","modified":1595935344793},{"_id":"themes/next/source/lib/pace/pace-theme-big-counter.min.css","hash":"5b561dc328af4c4d512e20a76fe964d113a32ba8","modified":1595935344793},{"_id":"themes/next/source/lib/pace/pace-theme-bounce.min.css","hash":"f6bdb9a785b7979dd8ec5c60e278af955ef1e585","modified":1595935344793},{"_id":"themes/next/source/lib/jquery_lazyload/.bower.json","hash":"b7638afc93e9cd350d0783565ee9a7da6805ad8e","modified":1595935344791},{"_id":"themes/next/source/lib/pace/pace-theme-center-atom.min.css","hash":"dcf79c24fe5350fb73d8038573a104e73639e9d3","modified":1595935344794},{"_id":"themes/next/source/lib/pace/pace-theme-center-radar.min.css","hash":"ab7cba998bf4c03b13df342bf43647fa4f419783","modified":1595935344794},{"_id":"themes/next/source/lib/pace/pace-theme-center-circle.min.css","hash":"a4066769c78affbfbc5e30a600e2c7862cd532e0","modified":1595935344794},{"_id":"themes/next/source/lib/pace/pace-theme-center-simple.min.css","hash":"67f44c947548bd4d77e7590d3f59e236cbf9e98a","modified":1595935344794},{"_id":"themes/next/source/lib/pace/pace-theme-corner-indicator.min.css","hash":"b3c64c973f31884e3d8145989476707333406b9a","modified":1595935344795},{"_id":"themes/next/source/lib/pace/pace-theme-fill-left.min.css","hash":"0bec1e235a4a2cccda3f993b205424e1441a44ae","modified":1595935344795},{"_id":"themes/next/source/lib/pace/pace-theme-flash.min.css","hash":"13ace22c40312d7bbd8d9c1e50eff897a7a497d8","modified":1595935344795},{"_id":"themes/next/source/lib/pace/pace-theme-loading-bar.min.css","hash":"7ee28875dfc1230d76c537f6605766e8d4011e9f","modified":1595935344795},{"_id":"themes/next/source/lib/pace/pace-theme-mac-osx.min.css","hash":"9f2e7b51b084da407863826b25265b31150b3821","modified":1595935344795},{"_id":"themes/next/source/lib/pace/pace-theme-minimal.min.css","hash":"9cd783cceb8a191f3c8b5d81f7a430ecc3e489d3","modified":1595935344796},{"_id":"themes/next/source/lib/velocity/bower.json","hash":"2ec99573e84c7117368beccb9e94b6bf35d2db03","modified":1595935344802},{"_id":"themes/next/source/lib/pace/pace.min.js","hash":"9944dfb7814b911090e96446cea4d36e2b487234","modified":1595935344796},{"_id":"themes/next/source/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1595935344805},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1595935344806},{"_id":"themes/next/source/lib/velocity/.bower.json","hash":"05f960846f1c7a93dab1d3f9a1121e86812e8c88","modified":1595935344802},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1595935344806},{"_id":"themes/next/source/lib/three/canvas_lines.min.js","hash":"dce4a3b65f8bf958f973690caa7ec4952f353b0c","modified":1595935344796},{"_id":"themes/next/source/lib/three/three-waves.min.js","hash":"d968cba6b3a50b3626a02d67b544f349d83b147c","modified":1595935344797},{"_id":"themes/next/source/lib/three/canvas_sphere.min.js","hash":"d8ea241a53c135a650f7335d2b6982b899fd58a9","modified":1595935344797},{"_id":"themes/next/source/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1595935344790},{"_id":"themes/next/layout/_third-party/search/algolia-search/assets.swig","hash":"28ff4ed6714c59124569ffcbd10f1173d53ca923","modified":1595935344709},{"_id":"themes/next/layout/_third-party/search/algolia-search/dom.swig","hash":"ba698f49dd3a868c95b240d802f5b1b24ff287e4","modified":1595935344709},{"_id":"themes/next/source/css/_common/components/buttons.styl","hash":"7e509c7c28c59f905b847304dd3d14d94b6f3b8e","modified":1595935344718},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"31050fc7a25784805b4843550151c93bfa55c9c8","modified":1595935344717},{"_id":"themes/next/source/css/_common/components/comments.styl","hash":"471f1627891aca5c0e1973e09fbcb01e1510d193","modified":1595935344718},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"a6bb5256be6195e76addbda12f4ed7c662d65e7a","modified":1595935344718},{"_id":"themes/next/source/css/_common/components/back-to-top-sidebar.styl","hash":"4719ce717962663c5c33ef97b1119a0b3a4ecdc3","modified":1595935344717},{"_id":"themes/next/source/css/_common/components/pagination.styl","hash":"c5d48863f332ff8ce7c88dec2c893f709d7331d3","modified":1595935344722},{"_id":"themes/next/source/css/_common/components/tag-cloud.styl","hash":"dd8a3b22fc2f222ac6e6c05bd8a773fb039169c0","modified":1595935344729},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"f7c44b0ee46cf2cf82a4c9455ba8d8b55299976f","modified":1595935344734},{"_id":"themes/next/source/css/_common/scaffolding/helpers.styl","hash":"9c25c75311e1bd4d68df031d3f2ae6d141a90766","modified":1595935344734},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"ece571f38180febaf02ace8187ead8318a300ea7","modified":1595935344735},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"a280a583b7615e939aaddbf778f5c108ef8a2a6c","modified":1595935344735},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"64f5d56c08d74a338813df1265580ca0cbf0190b","modified":1595935344735},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"2186be20e317505cd31886f1291429cc21f76703","modified":1595935344734},{"_id":"themes/next/source/css/_common/scaffolding/mobile.styl","hash":"47a46583a1f3731157a3f53f80ed1ed5e2753e8e","modified":1595935344735},{"_id":"themes/next/source/css/_schemes/Gemini/index.styl","hash":"18c3336ee3d09bd2da6a876e1336539f03d5a973","modified":1595935344737},{"_id":"themes/next/source/css/_schemes/Mist/_base.styl","hash":"c2d079788d6fc2e9a191ccdae94e50d55bf849dc","modified":1595935344737},{"_id":"themes/next/source/css/_schemes/Mist/_logo.styl","hash":"38e5df90c8689a71c978fd83ba74af3d4e4e5386","modified":1595935344738},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expanded.styl","hash":"3b25edfa187d1bbbd0d38b50dd013cef54758abf","modified":1595935344738},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"5ae7906dc7c1d9468c7f4b4a6feddddc555797a1","modified":1595935344738},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"b0dcca862cd0cc6e732e33d975b476d744911742","modified":1595935344738},{"_id":"themes/next/source/css/_schemes/Mist/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1595935344738},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"9a5581a770af8964064fef7afd3e16963e45547f","modified":1595935344739},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"0efa036a15c18f5abb058b7c0fad1dd9ac5eed4c","modified":1595935344739},{"_id":"themes/next/source/css/_schemes/Muse/_logo.styl","hash":"8829bc556ca38bfec4add4f15a2f028092ac6d46","modified":1595935344740},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"4aac01962520d60b03b23022ab601ad4bd19c08c","modified":1595935344740},{"_id":"themes/next/source/css/_schemes/Pisces/_brand.styl","hash":"c4ed249798296f60bda02351fe6404fb3ef2126f","modified":1595935344741},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"5b93958239d3d2bf9aeaede44eced2434d784462","modified":1595935344741},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"215de948be49bcf14f06d500cef9f7035e406a43","modified":1595935344741},{"_id":"themes/next/source/css/_schemes/Pisces/_posts.styl","hash":"2f878213cb24c5ddc18877f6d15ec5c5f57745ac","modified":1595935344741},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"9d16fa3c14ed76b71229f022b63a02fd0f580958","modified":1595935344742},{"_id":"themes/next/source/css/_schemes/Muse/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1595935344740},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"69ecd6c97e7cdfd822ac8102b45ad0ede85050db","modified":1595935344742},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"a0e2030a606c934fb2c5c7373aaae04a1caac4c5","modified":1595935344740},{"_id":"themes/next/source/js/src/schemes/pisces.js","hash":"8050a5b2683d1d77238c5762b6bd89c543daed6e","modified":1595935344751},{"_id":"themes/next/source/lib/Han/dist/han.css","hash":"bd40da3fba8735df5850956814e312bd7b3193d7","modified":1595935344754},{"_id":"themes/next/source/lib/Han/dist/han.min.css","hash":"a0c9e32549a8b8cf327ab9227b037f323cdb60ee","modified":1595935344756},{"_id":"themes/next/source/lib/Han/dist/han.min.js","hash":"f559c68a25065a14f47da954a7617d87263e409d","modified":1595935344756},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1595935344762},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1595935344763},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1595935344764},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1595935344764},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1595935344764},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1595935344764},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1595935344766},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1595935344767},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1595935344767},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1595935344769},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1595935344769},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1595935344778},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1595935344778},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1595935344779},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1595935344801},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1595935344802},{"_id":"themes/next/source/lib/Han/dist/han.js","hash":"e345397e0585c9fed1449e614ec13e0224acf2ab","modified":1595935344755},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1595935344788},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1595935344789},{"_id":"themes/next/source/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1595935344804},{"_id":"themes/next/source/css/_common/components/highlight/diff.styl","hash":"96f32ea6c3265a3889e6abe57587f6e2a2a40dfb","modified":1595935344720},{"_id":"themes/next/source/css/_common/components/highlight/highlight.styl","hash":"25dc25f61a232f03ca72472b7852f882448ec185","modified":1595935344720},{"_id":"themes/next/source/css/_common/components/highlight/theme.styl","hash":"b76387934fb6bb75212b23c1a194486892cc495e","modified":1595935344721},{"_id":"themes/next/source/css/_common/components/header/header.styl","hash":"ae1ca14e51de67b07dba8f61ec79ee0e2e344574","modified":1595935344719},{"_id":"themes/next/source/css/_common/components/header/headerband.styl","hash":"d27448f199fc2f9980b601bc22b87f08b5d64dd1","modified":1595935344719},{"_id":"themes/next/source/css/_common/components/header/menu.styl","hash":"8a2421cb9005352905fae9d41a847ae56957247e","modified":1595935344719},{"_id":"themes/next/source/css/_common/components/header/site-meta.styl","hash":"6c00f6e0978f4d8f9a846a15579963728aaa6a17","modified":1595935344720},{"_id":"themes/next/source/css/_common/components/header/site-nav.styl","hash":"49c2b2c14a1e7fcc810c6be4b632975d0204c281","modified":1595935344720},{"_id":"themes/next/source/css/_common/components/pages/archive.styl","hash":"f5aa2ba3bfffc15475e7e72a55b5c9d18609fdf5","modified":1595935344721},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"4eff5b252d7b614e500fc7d52c97ce325e57d3ab","modified":1595935344721},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"2039590632bba3943c39319d80ef630af7928185","modified":1595935344722},{"_id":"themes/next/source/css/_common/components/pages/post-detail.styl","hash":"9bf4362a4d0ae151ada84b219d39fbe5bb8c790e","modified":1595935344722},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"a82afbb72d83ee394aedc7b37ac0008a9823b4f4","modified":1595935344722},{"_id":"themes/next/source/css/_common/components/footer/footer.styl","hash":"7905a7f625702b45645d8be1268cb8af3f698c70","modified":1595935344718},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author-links.styl","hash":"0a6c0efffdf18bddbc1d1238feaed282b09cd0fe","modified":1595935344727},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author.styl","hash":"48c000163ce191a76e9e5c747c72be5c46930b88","modified":1595949380275},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-blogroll.styl","hash":"89dd4f8b1f1cce3ad46cf2256038472712387d02","modified":1595935344727},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-feed-link.styl","hash":"9486ddd2cb255227db102d09a7df4cae0fabad72","modified":1595935344728},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-nav.styl","hash":"45fa7193435a8eae9960267438750b4c9fa9587f","modified":1595935344728},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toggle.styl","hash":"f7784aba0c1cd20d824c918c120012d57a5eaa2a","modified":1595935344728},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toc.styl","hash":"12937cae17c96c74d5c58db6cb29de3b2dfa14a2","modified":1595935344728},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar.styl","hash":"50305b6ad7d09d2ffa4854e39f41ec1f4fe984fd","modified":1595935344728},{"_id":"themes/next/source/css/_common/components/sidebar/site-state.styl","hash":"3623e7fa4324ec1307370f33d8f287a9e20a5578","modified":1595935344729},{"_id":"themes/next/source/css/_common/components/post/post-button.styl","hash":"e72a89e0f421444453e149ba32c77a64bd8e44e8","modified":1595935344723},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"0f7f522cc6bfb3401d5afd62b0fcdf48bb2d604b","modified":1595935344723},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"2cdc094ecf907a02fce25ad4a607cd5c40da0f2b","modified":1595935344723},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"535b3b4f8cb1eec2558e094320e7dfb01f94c0e7","modified":1595935344723},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"387ce23bba52b22a586b2dfb4ec618fe1ffd3926","modified":1595935344724},{"_id":"themes/next/source/css/_common/components/post/post-meta.styl","hash":"aea21141015ca8c409d8b33e3e34ec505f464e93","modified":1595935344724},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"a5d8617a24d7cb6c5ad91ea621183ca2c0917331","modified":1595935344724},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"a352ae5b1f8857393bf770d2e638bf15f0c9585d","modified":1595935344725},{"_id":"themes/next/source/css/_common/components/post/post-rtl.styl","hash":"017074ef58166e2d69c53bb7590a0e7a8947a1ed","modified":1595935344724},{"_id":"themes/next/source/css/_common/components/post/post-title.styl","hash":"d5a4e4fc17f1f7e7c3a61b52d8e2e9677e139de7","modified":1595935344725},{"_id":"themes/next/source/css/_common/components/post/post-type.styl","hash":"10251257aceecb117233c9554dcf8ecfef8e2104","modified":1595935344726},{"_id":"themes/next/source/css/_common/components/post/post-widgets.styl","hash":"e4055a0d2cd2b0ad9dc55928e2f3e7bd4e499da3","modified":1595935344726},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-dimmer.styl","hash":"efa5e5022e205b52786ce495d4879f5e7b8f84b2","modified":1595935344727},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"262debfd4442fa03d9919ceb88b948339df03fb0","modified":1595935344726},{"_id":"themes/next/source/css/_common/components/post/post-copyright.styl","hash":"f54367c0feda6986c030cc4d15a0ca6ceea14bcb","modified":1595935344723},{"_id":"themes/next/source/css/_common/components/third-party/baidushare.styl","hash":"93b08815c4d17e2b96fef8530ec1f1064dede6ef","modified":1595935344732},{"_id":"themes/next/source/css/_common/components/third-party/busuanzi-counter.styl","hash":"d4e6d8d7b34dc69994593c208f875ae8f7e8a3ae","modified":1595935344732},{"_id":"themes/next/source/css/_common/components/third-party/duoshuo.styl","hash":"2340dd9b3202c61d73cc708b790fac5adddbfc7f","modified":1595935344732},{"_id":"themes/next/source/css/_common/components/third-party/han.styl","hash":"cce6772e2cdb4db85d35486ae4c6c59367fbdd40","modified":1595935344733},{"_id":"themes/next/source/css/_common/components/third-party/jiathis.styl","hash":"327b5f63d55ec26f7663185c1a778440588d9803","modified":1595935344733},{"_id":"themes/next/source/css/_common/components/third-party/localsearch.styl","hash":"d89c4b562b528e4746696b2ad8935764d133bdae","modified":1595935344733},{"_id":"themes/next/source/css/_common/components/third-party/needsharebutton.styl","hash":"a5e3e6b4b4b814a9fe40b34d784fed67d6d977fa","modified":1595935344733},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"36332c8a91f089f545f3c3e8ea90d08aa4d6e60c","modified":1595935344724},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"1ccfbd4d0f5754b2dc2719a91245c95f547a7652","modified":1595935344733},{"_id":"themes/next/source/css/_common/components/third-party/algolia-search.styl","hash":"fd42777b9125fd8969dc39d4f15473e2b91b4142","modified":1595935344732},{"_id":"themes/next/source/css/_common/components/third-party/gitment.styl","hash":"34935b40237c074be5f5e8818c14ccfd802b7439","modified":1595935344732},{"_id":"themes/next/source/css/_common/components/tags/blockquote-center.styl","hash":"c2abe4d87148e23e15d49ee225bc650de60baf46","modified":1595935344729},{"_id":"themes/next/source/css/_common/components/tags/full-image.styl","hash":"37e951e734a252fe8a81f452b963df2ba90bfe90","modified":1595935344730},{"_id":"themes/next/source/css/_common/components/tags/group-pictures.styl","hash":"4851b981020c5cbc354a1af9b831a2dcb3cf9d39","modified":1595935344730},{"_id":"themes/next/source/css/_common/components/tags/label.styl","hash":"4a457d265d62f287c63d48764ce45d9bcfc9ec5a","modified":1595935344730},{"_id":"themes/next/source/css/_common/components/tags/exturl.styl","hash":"1b3cc9f4e5a7f6e05b4100e9990b37b20d4a2005","modified":1595935344729},{"_id":"themes/next/source/css/_common/components/tags/note.styl","hash":"32c9156bea5bac9e9ad0b4c08ffbca8b3d9aac4b","modified":1595935344731},{"_id":"themes/next/source/css/_common/components/tags/tabs.styl","hash":"4ab5deed8c3b0c338212380f678f8382672e1bcb","modified":1595935344731},{"_id":"themes/next/source/css/_common/components/tags/tags.styl","hash":"ead0d0f2321dc71505788c7f689f92257cf14947","modified":1595935344731},{"_id":"themes/next/source/css/_common/components/tags/note-modern.styl","hash":"ee7528900578ef4753effe05b346381c40de5499","modified":1595935344730},{"_id":"themes/next/source/css/_schemes/Mist/outline/outline.styl","hash":"5dc4859c66305f871e56cba78f64bfe3bf1b5f01","modified":1595935344739},{"_id":"themes/next/source/css/_schemes/Mist/sidebar/sidebar-blogroll.styl","hash":"817587e46df49e819858c8ecbafa08b53d5ff040","modified":1595935344739},{"_id":"themes/next/source/css/_schemes/Muse/sidebar/sidebar-blogroll.styl","hash":"817587e46df49e819858c8ecbafa08b53d5ff040","modified":1595935344740},{"_id":"themes/next/source/images/avatar_2.gif","hash":"34226e87bf4e8cc6b2d2bce17295d7177da7ad2a","modified":1595991400579},{"_id":"themes/next/source/lib/Han/dist/font/han-space.otf","hash":"07436f011b44051f61b8329c99de4bec64e86f4b","modified":1595935344753},{"_id":"themes/next/source/lib/Han/dist/font/han-space.woff","hash":"7a635062b10bf5662ae1d218ba0980171005d060","modified":1595935344753},{"_id":"themes/next/source/lib/Han/dist/font/han.woff","hash":"f38ff9b2eecaa17b50b66aa2dae87e9e7436d195","modified":1595935344754},{"_id":"themes/next/source/lib/Han/dist/font/han.otf","hash":"f1f6bb8f461f5672e000380195d3d2358a28494c","modified":1595935344753},{"_id":"themes/next/source/lib/Han/dist/font/han.woff2","hash":"623af3ed5423371ac136a4fe0e8cc7bb7396037a","modified":1595935344754},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1595935344765},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1595935344765},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1595935344765},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1595935344765},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1595935344766},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1595935344766},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1595935344788},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1595935344781},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1595935344783},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","hash":"9ccc6f8144f54e86df9a3fd33a18368d81cf3a4f","modified":1595935344760},{"_id":"themes/next/source/lib/three/three.min.js","hash":"73f4cdc17e51a72b9bf5b9291f65386d615c483b","modified":1595935344800},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"98a8aa5cf7d62c2eff5f07ede8d844b874ef06ed","modified":1595935344786},{"_id":"public/search.xml","hash":"c6b4f59a8a83000789f945fd00767092325f4232","modified":1597656052644},{"_id":"public/categories/index.html","hash":"ee4841717c6cb8b105731c15421cc7767c32b14e","modified":1597656052644},{"_id":"public/tags/index.html","hash":"46e567e1a596a947f062b44ad670b26586f639e3","modified":1597656052644},{"_id":"public/about/index.html","hash":"5b1a6f476c39e0aa81e289909d00eddd6c24dc25","modified":1597656052644},{"_id":"public/posts/9912b79f/index.html","hash":"576b94dbd92b7d61098fe78980783dc30b0ea211","modified":1597656052644},{"_id":"public/posts/91d834a1/index.html","hash":"a74dd60c588d1669dd9a9ffe3dd0a1b141586602","modified":1597656052644},{"_id":"public/posts/fbb0c1cd/index.html","hash":"24eb6374e65b7f6f6ade45ea1f29db7e785ba68c","modified":1597656052644},{"_id":"public/posts/9adfc48b/index.html","hash":"2a54fde6ea6c33f539c2ac37c007dc6f8b905c0d","modified":1597656052644},{"_id":"public/posts/b6a54014/index.html","hash":"687db414bef72546ec4b27a38c2d86ebb979def1","modified":1597656052644},{"_id":"public/posts/c1889358/index.html","hash":"bce9ebd07f1155cf3e3700a02a48bd3e1b318946","modified":1597656052644},{"_id":"public/posts/4a17b156/index.html","hash":"ca30bb751a9bdd1f73dfb01ba559d027ecf24229","modified":1597656052644},{"_id":"public/categories/Algorithm/index.html","hash":"454621b8ffb561a4f4baaf615c657b3b53b44633","modified":1597656052644},{"_id":"public/categories/前端框架/index.html","hash":"b83498928640a92a5bcd9a98a808896c8200c239","modified":1597656052644},{"_id":"public/index.html","hash":"bcdc32091eeebce24510d74c2ea2cfc97f76c7e9","modified":1597656052644},{"_id":"public/tags/LeetCode/index.html","hash":"9201f8a65072fee65edcb2c7335a9ee6c7eb119b","modified":1597656052644},{"_id":"public/tags/Vue/index.html","hash":"f401af1000897f7f2a69d8dd31e13697555575ae","modified":1597656052644},{"_id":"public/tags/js/index.html","hash":"8f4396f6cfa7878d4667ab9495b4e02c36936173","modified":1597656052644},{"_id":"public/tags/array/index.html","hash":"55b1929593a5f178466891ac62c5c90df0f89549","modified":1597656052644},{"_id":"public/tags/two-pointers/index.html","hash":"9c9aec31eebfdc3e31d41a682f2ab8d3e78c70dc","modified":1597656052644},{"_id":"public/archives/index.html","hash":"fc5e159d295ba587bcd30648a1ef51be841ff211","modified":1597656052644},{"_id":"public/archives/2020/index.html","hash":"091a6814ce663771d98127edd9de253e48685c31","modified":1597656052644},{"_id":"public/archives/2020/07/index.html","hash":"9eca17fdcbe6e5cd6b864f54290c941791e59459","modified":1597656052644},{"_id":"public/archives/2020/08/index.html","hash":"9537a86808294e6147c56629f99bb785d9fff4d4","modified":1597656052644},{"_id":"public/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1597656052644},{"_id":"public/CNAME","hash":"012e2c960e6590e339af6e0b980233583b178c8f","modified":1597656052644},{"_id":"public/images/algolia_logo.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1597656052644},{"_id":"public/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1597656052644},{"_id":"public/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1597656052644},{"_id":"public/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1597656052644},{"_id":"public/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1597656052644},{"_id":"public/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1597656052644},{"_id":"public/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1597656052644},{"_id":"public/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1597656052644},{"_id":"public/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1597656052644},{"_id":"public/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1597656052644},{"_id":"public/images/favicon.svg","hash":"d86c042282707c4768d903afd6f0791dd103b1c7","modified":1597656052644},{"_id":"public/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1597656052644},{"_id":"public/images/logo.svg","hash":"d29cacbae1bdc4bbccb542107ee0524fe55ad6de","modified":1597656052644},{"_id":"public/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1597656052644},{"_id":"public/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1597656052644},{"_id":"public/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1597656052644},{"_id":"public/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1597656052644},{"_id":"public/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1597656052644},{"_id":"public/images/smile.png","hash":"437533897dc8fbf6e68c195dd758cd1a2001c8dc","modified":1597656052644},{"_id":"public/lib/fastclick/LICENSE","hash":"dcd5b6b43095d9e90353a28b09cb269de8d4838e","modified":1597656052644},{"_id":"public/lib/font-awesome/HELP-US-OUT.txt","hash":"4f7bf961f1bed448f6ba99aeb9219fabf930ba96","modified":1597656052644},{"_id":"public/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1597656052644},{"_id":"public/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1597656052644},{"_id":"public/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1597656052644},{"_id":"public/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1597656052644},{"_id":"public/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1597656052644},{"_id":"public/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1597656052644},{"_id":"public/lib/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1597656052644},{"_id":"public/lib/Han/dist/font/han-space.otf","hash":"07436f011b44051f61b8329c99de4bec64e86f4b","modified":1597656052644},{"_id":"public/lib/Han/dist/font/han-space.woff","hash":"7a635062b10bf5662ae1d218ba0980171005d060","modified":1597656052644},{"_id":"public/lib/Han/dist/font/han.woff","hash":"f38ff9b2eecaa17b50b66aa2dae87e9e7436d195","modified":1597656052644},{"_id":"public/lib/Han/dist/font/han.otf","hash":"f1f6bb8f461f5672e000380195d3d2358a28494c","modified":1597656052644},{"_id":"public/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1597656052644},{"_id":"public/lib/Han/dist/font/han.woff2","hash":"623af3ed5423371ac136a4fe0e8cc7bb7396037a","modified":1597656052644},{"_id":"public/posts/9adfc48b/largen-reach.png","hash":"65c5fe4cc7c549e23886375132e006ffb2e8e881","modified":1597656052644},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1597656052644},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1597656052644},{"_id":"public/posts/91d834a1/bitmask4.png","hash":"2c12dfaeec5c2e250853a9beaa39ab495568d815","modified":1597656052644},{"_id":"public/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1597656052644},{"_id":"public/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1597656052644},{"_id":"public/js/src/exturl.js","hash":"e42e2aaab7bf4c19a0c8e779140e079c6aa5c0b1","modified":1597656052644},{"_id":"public/js/src/algolia-search.js","hash":"b172f697ed339a24b1e80261075232978d164c35","modified":1597656052644},{"_id":"public/js/src/bootstrap.js","hash":"034bc8113e0966fe2096ba5b56061bbf10ef0512","modified":1597656052644},{"_id":"public/js/src/js.cookie.js","hash":"9b37973a90fd50e71ea91682265715e45ae82c75","modified":1597656052644},{"_id":"public/js/src/motion.js","hash":"754b294394f102c8fd9423a1789ddb1201677898","modified":1597656052644},{"_id":"public/js/src/scroll-cookie.js","hash":"09dc828cbf5f31158ff6250d2bf7c3cde6365c67","modified":1597656052644},{"_id":"public/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1597656052644},{"_id":"public/js/src/post-details.js","hash":"a13f45f7aa8291cf7244ec5ba93907d119c5dbdd","modified":1597656052644},{"_id":"public/js/src/utils.js","hash":"9b1325801d27213083d1487a12b1a62b539ab6f8","modified":1597656052644},{"_id":"public/lib/canvas-ribbon/canvas-ribbon.js","hash":"ff5915eb2596e890a2fc6697c864f861a1995ec0","modified":1597656052644},{"_id":"public/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1597656052644},{"_id":"public/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1597656052644},{"_id":"public/lib/fastclick/bower.json","hash":"4dcecf83afddba148464d5339c93f6d0aa9f42e9","modified":1597656052644},{"_id":"public/lib/font-awesome/bower.json","hash":"64394a2a9aa00f8e321d8daa5e51a420f0e96dad","modified":1597656052644},{"_id":"public/lib/jquery_lazyload/bower.json","hash":"ae3c3b61e6e7f9e1d7e3585ad854380ecc04cf53","modified":1597656052644},{"_id":"public/lib/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1597656052644},{"_id":"public/lib/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1597656052644},{"_id":"public/lib/needsharebutton/needsharebutton.css","hash":"3ef0020a1815ca6151ea4886cd0d37421ae3695c","modified":1597656052644},{"_id":"public/lib/pace/pace-theme-big-counter.min.css","hash":"5b561dc328af4c4d512e20a76fe964d113a32ba8","modified":1597656052644},{"_id":"public/lib/pace/pace-theme-bounce.min.css","hash":"f6bdb9a785b7979dd8ec5c60e278af955ef1e585","modified":1597656052644},{"_id":"public/lib/pace/pace-theme-center-atom.min.css","hash":"dcf79c24fe5350fb73d8038573a104e73639e9d3","modified":1597656052644},{"_id":"public/lib/pace/pace-theme-center-radar.min.css","hash":"ab7cba998bf4c03b13df342bf43647fa4f419783","modified":1597656052644},{"_id":"public/lib/pace/pace-theme-center-circle.min.css","hash":"a4066769c78affbfbc5e30a600e2c7862cd532e0","modified":1597656052644},{"_id":"public/lib/pace/pace-theme-barber-shop.min.css","hash":"ee0d51446cb4ffe1bb96bd7bc8c8e046dddfcf46","modified":1597656052644},{"_id":"public/lib/pace/pace-theme-corner-indicator.min.css","hash":"b3c64c973f31884e3d8145989476707333406b9a","modified":1597656052644},{"_id":"public/lib/pace/pace-theme-center-simple.min.css","hash":"67f44c947548bd4d77e7590d3f59e236cbf9e98a","modified":1597656052644},{"_id":"public/lib/pace/pace-theme-fill-left.min.css","hash":"0bec1e235a4a2cccda3f993b205424e1441a44ae","modified":1597656052644},{"_id":"public/lib/pace/pace-theme-loading-bar.min.css","hash":"7ee28875dfc1230d76c537f6605766e8d4011e9f","modified":1597656052644},{"_id":"public/lib/pace/pace-theme-flash.min.css","hash":"13ace22c40312d7bbd8d9c1e50eff897a7a497d8","modified":1597656052644},{"_id":"public/lib/pace/pace-theme-mac-osx.min.css","hash":"9f2e7b51b084da407863826b25265b31150b3821","modified":1597656052644},{"_id":"public/lib/velocity/bower.json","hash":"0ef14e7ccdfba5db6eb3f8fc6aa3b47282c36409","modified":1597656052644},{"_id":"public/lib/pace/pace.min.js","hash":"9944dfb7814b911090e96446cea4d36e2b487234","modified":1597656052644},{"_id":"public/lib/pace/pace-theme-minimal.min.css","hash":"9cd783cceb8a191f3c8b5d81f7a430ecc3e489d3","modified":1597656052644},{"_id":"public/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1597656052644},{"_id":"public/js/src/schemes/pisces.js","hash":"8050a5b2683d1d77238c5762b6bd89c543daed6e","modified":1597656052644},{"_id":"public/lib/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1597656052644},{"_id":"public/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1597656052644},{"_id":"public/lib/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1597656052644},{"_id":"public/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1597656052644},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1597656052644},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1597656052644},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1597656052644},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1597656052644},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1597656052644},{"_id":"public/lib/fastclick/README.html","hash":"b9e008af0866799103e596e2eda466a33d7dde18","modified":1597656052644},{"_id":"public/lib/jquery_lazyload/CONTRIBUTING.html","hash":"7eecc5e472416b9870580c53b7ed0c44474ed23a","modified":1597656052644},{"_id":"public/lib/jquery_lazyload/README.html","hash":"9c91bba4263a20004f2c10772d438cfa8312c308","modified":1597656052644},{"_id":"public/css/main.css","hash":"708eb16e76c8589bbc0f51e001f947d499bdb2e8","modified":1597656052644},{"_id":"public/lib/needsharebutton/needsharebutton.js","hash":"9885fd9bea5e7ebafc5b1de9d17be5e106248d96","modified":1597656052644},{"_id":"public/lib/needsharebutton/font-embedded.css","hash":"c39d37278c1e178838732af21bd26cd0baeddfe0","modified":1597656052644},{"_id":"public/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1597656052644},{"_id":"public/lib/three/three-waves.min.js","hash":"d968cba6b3a50b3626a02d67b544f349d83b147c","modified":1597656052644},{"_id":"public/lib/three/canvas_lines.min.js","hash":"dce4a3b65f8bf958f973690caa7ec4952f353b0c","modified":1597656052644},{"_id":"public/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1597656052644},{"_id":"public/lib/three/canvas_sphere.min.js","hash":"d8ea241a53c135a650f7335d2b6982b899fd58a9","modified":1597656052644},{"_id":"public/lib/Han/dist/han.css","hash":"bd40da3fba8735df5850956814e312bd7b3193d7","modified":1597656052644},{"_id":"public/lib/Han/dist/han.min.css","hash":"a0c9e32549a8b8cf327ab9227b037f323cdb60ee","modified":1597656052644},{"_id":"public/lib/Han/dist/han.min.js","hash":"f559c68a25065a14f47da954a7617d87263e409d","modified":1597656052644},{"_id":"public/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1597656052644},{"_id":"public/lib/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1597656052644},{"_id":"public/lib/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1597656052644},{"_id":"public/lib/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1597656052644},{"_id":"public/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1597656052644},{"_id":"public/lib/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1597656052644},{"_id":"public/lib/Han/dist/han.js","hash":"e345397e0585c9fed1449e614ec13e0224acf2ab","modified":1597656052644},{"_id":"public/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1597656052644},{"_id":"public/lib/algolia-instant-search/instantsearch.min.js","hash":"9ccc6f8144f54e86df9a3fd33a18368d81cf3a4f","modified":1597656052644},{"_id":"public/lib/three/three.min.js","hash":"73f4cdc17e51a72b9bf5b9291f65386d615c483b","modified":1597656052644},{"_id":"public/lib/font-awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1597656052644},{"_id":"public/posts/9adfc48b/45_fig1.png","hash":"c263da40f4a55cad4e6b21c80d7e8849ef7ccec5","modified":1597656052644},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1597656052644},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1597656052644},{"_id":"public/images/avatar_2.gif","hash":"34226e87bf4e8cc6b2d2bce17295d7177da7ad2a","modified":1597656052644},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"98a8aa5cf7d62c2eff5f07ede8d844b874ef06ed","modified":1597656052644}],"Category":[{"name":"Algorithm","_id":"ckdyb5wbn00025z9h94xd2gh4"},{"name":"前端框架","_id":"ckdyb5wbu000d5z9h3t2t7mp4"}],"Data":[],"Page":[{"title":"categories","date":"2020-07-28T16:03:47.000Z","type":"categories","comments":0,"_content":" \n归档页面","source":"categories/index.md","raw":"---\ntitle: categories\ndate: 2020-07-29 00:03:47\ntype: \"categories\"\ncomments: false\n---\n \n归档页面","updated":"2020-07-29T01:50:14.660Z","path":"categories/index.html","layout":"page","_id":"ckdyb5wcr000t5z9h25vo28w2","content":"<p>归档页面</p>\n","site":{"data":{}},"excerpt":"","more":"<p>归档页面</p>\n"},{"title":"tags","date":"2020-07-28T16:05:17.000Z","type":"tags","_content":"\n标签页面","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2020-07-29 00:05:17\ntype: tags\n---\n\n标签页面","updated":"2020-07-29T02:28:41.648Z","path":"tags/index.html","comments":1,"layout":"page","_id":"ckdyb5wcs000u5z9h61fcc86i","content":"<p>标签页面</p>\n","site":{"data":{}},"excerpt":"","more":"<p>标签页面</p>\n"},{"title":"about","date":"2020-07-28T16:05:56.000Z","_content":"\n关于页面","source":"about/index.md","raw":"---\ntitle: about\ndate: 2020-07-29 00:05:56\n---\n\n关于页面","updated":"2020-07-29T01:50:06.708Z","path":"about/index.html","comments":1,"layout":"page","_id":"ckdyb5wct000v5z9h2k2vhpbr","content":"<p>关于页面</p>\n","site":{"data":{}},"excerpt":"","more":"<p>关于页面</p>\n"}],"Post":[{"title":"Binary Search","abbrlink":"fbb0c1cd","date":"2020-08-03T02:21:55.000Z","_content":"\n\n\n#### [35] Search Insert Position\n\n> Given a sorted array and a target value, return the index if the target is found. If not, return the index where it would be if it were inserted in order.\n>\n> You may assume no duplicates in the array.\n\n\n\n###### My solution\n\n我是哪里来的if-else怪物(为了边界情况, 疯狂if-else), 代码一点都不优雅, 考点应该是折半查找, 被我写成这个样子. 不说了, 我去找优雅解法去了.....\n\n```javascript\nvar searchInsert = function (nums, target) {\n  let start = 0,\n    end = nums.length - 1;\n  let mid = start + index(end - start);\n  // 数组len=1\n  if (start == end) {\n    if (target > nums[end])\n      return 1\n    else if (target < nums[start])\n      return 0\n    else\n      return start\n  } else if (end - start == 1) { // 数组len=2\n    if (target > nums[end])\n      return end + 1\n    else if (target < nums[start])\n      return 0\n    else if (target == nums[start])\n      return start\n    else\n      return end\n  } else { // 数组len>2\n    while (end - start > 1) {\n      if (target < nums[mid]) {\n        console.log('target:' + target + '<' + \"nums[\" + mid + \"]:\" + nums[mid]);\n        end = mid;\n        if (end - start == 1) {\n          if (target == nums[start]) {\n            return start\n          } else if (target < nums[start]) {\n            return 0\n          } else {\n            return start + 1\n          }\n        } else {\n          mid = start + index(end - start);\n        }\n      } else if (target > nums[mid]) {\n        console.log('target:' + target + '>' + \"nums[\" + mid + \"]:\" + nums[mid]);\n        start = mid;\n        if (end - start == 1) {\n          if (target == nums[end]) {\n            return end\n          } else if (target > nums[end]) {\n            return end + 1\n          } else {\n            return start + 1\n          }\n        } else {\n          mid = start + index(end - start);\n        }\n      } else {\n        // console.log(mid);\n        return mid;\n      }\n    }\n  }\n};\n\nvar index = (gap) => {\n  if (gap % 2 == 0)\n    return gap / 2;\n  else\n    return (gap + 1) / 2\n}\n```\n\n\n\n###### solution on the Internet\n\n参考网上的解法, 优化了一下, 感觉稍微简洁了些, 这里的mid取值是靠左的.所以一开始判断end值\n\n```javascript\nvar searchInsert = function (nums, target) {\n\n  if (nums.length == 0)\n    return 0\n  let start = 0, end = nums.length - 1, mid = 0;\n  if (target > nums[end])\n    return end + 1;\n  // if (target < nums[start])\n  //   return 0;\n  // if (target == nums[start])\n  //   return start\n\n  while (end > start) {\n    mid = start + parseInt((end - start) / 2); // parseInt 直接丢弃小数部分, 保留整数部分\n    console.log('mid: ', mid, ' start: ', start, ' end: ', end);\n    if (target == nums[start])\n      return start;\n    if (target == nums[end])\n      return end;\n    if (target == nums[mid])\n      return mid;\n\n    if (target > nums[mid]) {\n      start = mid + 1;\n      // console.log('target > mid', 'start: ', start);\n    } else {\n      end = mid;\n      // console.log('target < mid', 'end: ', end);\n    }\n  }\n\n  return start\n}\n```\n\n\n\n","source":"_posts/Binary-Search.md","raw":"---\ntitle: Binary Search\ntags:\n  - LeetCode\ncategories: Algorithm\nabbrlink: fbb0c1cd\ndate: 2020-08-03 10:21:55\n---\n\n\n\n#### [35] Search Insert Position\n\n> Given a sorted array and a target value, return the index if the target is found. If not, return the index where it would be if it were inserted in order.\n>\n> You may assume no duplicates in the array.\n\n\n\n###### My solution\n\n我是哪里来的if-else怪物(为了边界情况, 疯狂if-else), 代码一点都不优雅, 考点应该是折半查找, 被我写成这个样子. 不说了, 我去找优雅解法去了.....\n\n```javascript\nvar searchInsert = function (nums, target) {\n  let start = 0,\n    end = nums.length - 1;\n  let mid = start + index(end - start);\n  // 数组len=1\n  if (start == end) {\n    if (target > nums[end])\n      return 1\n    else if (target < nums[start])\n      return 0\n    else\n      return start\n  } else if (end - start == 1) { // 数组len=2\n    if (target > nums[end])\n      return end + 1\n    else if (target < nums[start])\n      return 0\n    else if (target == nums[start])\n      return start\n    else\n      return end\n  } else { // 数组len>2\n    while (end - start > 1) {\n      if (target < nums[mid]) {\n        console.log('target:' + target + '<' + \"nums[\" + mid + \"]:\" + nums[mid]);\n        end = mid;\n        if (end - start == 1) {\n          if (target == nums[start]) {\n            return start\n          } else if (target < nums[start]) {\n            return 0\n          } else {\n            return start + 1\n          }\n        } else {\n          mid = start + index(end - start);\n        }\n      } else if (target > nums[mid]) {\n        console.log('target:' + target + '>' + \"nums[\" + mid + \"]:\" + nums[mid]);\n        start = mid;\n        if (end - start == 1) {\n          if (target == nums[end]) {\n            return end\n          } else if (target > nums[end]) {\n            return end + 1\n          } else {\n            return start + 1\n          }\n        } else {\n          mid = start + index(end - start);\n        }\n      } else {\n        // console.log(mid);\n        return mid;\n      }\n    }\n  }\n};\n\nvar index = (gap) => {\n  if (gap % 2 == 0)\n    return gap / 2;\n  else\n    return (gap + 1) / 2\n}\n```\n\n\n\n###### solution on the Internet\n\n参考网上的解法, 优化了一下, 感觉稍微简洁了些, 这里的mid取值是靠左的.所以一开始判断end值\n\n```javascript\nvar searchInsert = function (nums, target) {\n\n  if (nums.length == 0)\n    return 0\n  let start = 0, end = nums.length - 1, mid = 0;\n  if (target > nums[end])\n    return end + 1;\n  // if (target < nums[start])\n  //   return 0;\n  // if (target == nums[start])\n  //   return start\n\n  while (end > start) {\n    mid = start + parseInt((end - start) / 2); // parseInt 直接丢弃小数部分, 保留整数部分\n    console.log('mid: ', mid, ' start: ', start, ' end: ', end);\n    if (target == nums[start])\n      return start;\n    if (target == nums[end])\n      return end;\n    if (target == nums[mid])\n      return mid;\n\n    if (target > nums[mid]) {\n      start = mid + 1;\n      // console.log('target > mid', 'start: ', start);\n    } else {\n      end = mid;\n      // console.log('target < mid', 'end: ', end);\n    }\n  }\n\n  return start\n}\n```\n\n\n\n","slug":"Binary-Search","published":1,"updated":"2020-08-03T02:25:12.592Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckdyb5wbg00005z9h7ta7fq72","content":"<h4 id=\"35-Search-Insert-Position\"><a href=\"#35-Search-Insert-Position\" class=\"headerlink\" title=\"[35] Search Insert Position\"></a>[35] Search Insert Position</h4><blockquote>\n<p>Given a sorted array and a target value, return the index if the target is found. If not, return the index where it would be if it were inserted in order.</p>\n<p>You may assume no duplicates in the array.</p>\n</blockquote>\n<h6 id=\"My-solution\"><a href=\"#My-solution\" class=\"headerlink\" title=\"My solution\"></a>My solution</h6><p>我是哪里来的if-else怪物(为了边界情况, 疯狂if-else), 代码一点都不优雅, 考点应该是折半查找, 被我写成这个样子. 不说了, 我去找优雅解法去了…..</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> searchInsert = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">nums, target</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> start = <span class=\"number\">0</span>,</span><br><span class=\"line\">    end = nums.length - <span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> mid = start + index(end - start);</span><br><span class=\"line\">  <span class=\"comment\">// 数组len=1</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (start == end) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (target &gt; nums[end])</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (target &lt; nums[start])</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">      <span class=\"keyword\">return</span> start</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (end - start == <span class=\"number\">1</span>) &#123; <span class=\"comment\">// 数组len=2</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (target &gt; nums[end])</span><br><span class=\"line\">      <span class=\"keyword\">return</span> end + <span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (target &lt; nums[start])</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (target == nums[start])</span><br><span class=\"line\">      <span class=\"keyword\">return</span> start</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">      <span class=\"keyword\">return</span> end</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123; <span class=\"comment\">// 数组len&gt;2</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (end - start &gt; <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (target &lt; nums[mid]) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'target:'</span> + target + <span class=\"string\">'&lt;'</span> + <span class=\"string\">\"nums[\"</span> + mid + <span class=\"string\">\"]:\"</span> + nums[mid]);</span><br><span class=\"line\">        end = mid;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (end - start == <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">          <span class=\"keyword\">if</span> (target == nums[start]) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> start</span><br><span class=\"line\">          &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (target &lt; nums[start]) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">0</span></span><br><span class=\"line\">          &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> start + <span class=\"number\">1</span></span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">          mid = start + index(end - start);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (target &gt; nums[mid]) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'target:'</span> + target + <span class=\"string\">'&gt;'</span> + <span class=\"string\">\"nums[\"</span> + mid + <span class=\"string\">\"]:\"</span> + nums[mid]);</span><br><span class=\"line\">        start = mid;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (end - start == <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">          <span class=\"keyword\">if</span> (target == nums[end]) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> end</span><br><span class=\"line\">          &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (target &gt; nums[end]) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> end + <span class=\"number\">1</span></span><br><span class=\"line\">          &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> start + <span class=\"number\">1</span></span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">          mid = start + index(end - start);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// console.log(mid);</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> mid;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> index = <span class=\"function\">(<span class=\"params\">gap</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (gap % <span class=\"number\">2</span> == <span class=\"number\">0</span>)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> gap / <span class=\"number\">2</span>;</span><br><span class=\"line\">  <span class=\"keyword\">else</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> (gap + <span class=\"number\">1</span>) / <span class=\"number\">2</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h6 id=\"solution-on-the-Internet\"><a href=\"#solution-on-the-Internet\" class=\"headerlink\" title=\"solution on the Internet\"></a>solution on the Internet</h6><p>参考网上的解法, 优化了一下, 感觉稍微简洁了些, 这里的mid取值是靠左的.所以一开始判断end值</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> searchInsert = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">nums, target</span>) </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (nums.length == <span class=\"number\">0</span>)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> start = <span class=\"number\">0</span>, end = nums.length - <span class=\"number\">1</span>, mid = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (target &gt; nums[end])</span><br><span class=\"line\">    <span class=\"keyword\">return</span> end + <span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"comment\">// if (target &lt; nums[start])</span></span><br><span class=\"line\">  <span class=\"comment\">//   return 0;</span></span><br><span class=\"line\">  <span class=\"comment\">// if (target == nums[start])</span></span><br><span class=\"line\">  <span class=\"comment\">//   return start</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">while</span> (end &gt; start) &#123;</span><br><span class=\"line\">    mid = start + <span class=\"built_in\">parseInt</span>((end - start) / <span class=\"number\">2</span>); <span class=\"comment\">// parseInt 直接丢弃小数部分, 保留整数部分</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'mid: '</span>, mid, <span class=\"string\">' start: '</span>, start, <span class=\"string\">' end: '</span>, end);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (target == nums[start])</span><br><span class=\"line\">      <span class=\"keyword\">return</span> start;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (target == nums[end])</span><br><span class=\"line\">      <span class=\"keyword\">return</span> end;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (target == nums[mid])</span><br><span class=\"line\">      <span class=\"keyword\">return</span> mid;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (target &gt; nums[mid]) &#123;</span><br><span class=\"line\">      start = mid + <span class=\"number\">1</span>;</span><br><span class=\"line\">      <span class=\"comment\">// console.log('target &gt; mid', 'start: ', start);</span></span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      end = mid;</span><br><span class=\"line\">      <span class=\"comment\">// console.log('target &lt; mid', 'end: ', end);</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> start</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n","site":{"data":{}},"excerpt":"","more":"<h4 id=\"35-Search-Insert-Position\"><a href=\"#35-Search-Insert-Position\" class=\"headerlink\" title=\"[35] Search Insert Position\"></a>[35] Search Insert Position</h4><blockquote>\n<p>Given a sorted array and a target value, return the index if the target is found. If not, return the index where it would be if it were inserted in order.</p>\n<p>You may assume no duplicates in the array.</p>\n</blockquote>\n<h6 id=\"My-solution\"><a href=\"#My-solution\" class=\"headerlink\" title=\"My solution\"></a>My solution</h6><p>我是哪里来的if-else怪物(为了边界情况, 疯狂if-else), 代码一点都不优雅, 考点应该是折半查找, 被我写成这个样子. 不说了, 我去找优雅解法去了…..</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> searchInsert = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">nums, target</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> start = <span class=\"number\">0</span>,</span><br><span class=\"line\">    end = nums.length - <span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> mid = start + index(end - start);</span><br><span class=\"line\">  <span class=\"comment\">// 数组len=1</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (start == end) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (target &gt; nums[end])</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (target &lt; nums[start])</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">      <span class=\"keyword\">return</span> start</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (end - start == <span class=\"number\">1</span>) &#123; <span class=\"comment\">// 数组len=2</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (target &gt; nums[end])</span><br><span class=\"line\">      <span class=\"keyword\">return</span> end + <span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (target &lt; nums[start])</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (target == nums[start])</span><br><span class=\"line\">      <span class=\"keyword\">return</span> start</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">      <span class=\"keyword\">return</span> end</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123; <span class=\"comment\">// 数组len&gt;2</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (end - start &gt; <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (target &lt; nums[mid]) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'target:'</span> + target + <span class=\"string\">'&lt;'</span> + <span class=\"string\">\"nums[\"</span> + mid + <span class=\"string\">\"]:\"</span> + nums[mid]);</span><br><span class=\"line\">        end = mid;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (end - start == <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">          <span class=\"keyword\">if</span> (target == nums[start]) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> start</span><br><span class=\"line\">          &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (target &lt; nums[start]) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">0</span></span><br><span class=\"line\">          &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> start + <span class=\"number\">1</span></span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">          mid = start + index(end - start);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (target &gt; nums[mid]) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'target:'</span> + target + <span class=\"string\">'&gt;'</span> + <span class=\"string\">\"nums[\"</span> + mid + <span class=\"string\">\"]:\"</span> + nums[mid]);</span><br><span class=\"line\">        start = mid;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (end - start == <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">          <span class=\"keyword\">if</span> (target == nums[end]) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> end</span><br><span class=\"line\">          &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (target &gt; nums[end]) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> end + <span class=\"number\">1</span></span><br><span class=\"line\">          &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> start + <span class=\"number\">1</span></span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">          mid = start + index(end - start);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// console.log(mid);</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> mid;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> index = <span class=\"function\">(<span class=\"params\">gap</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (gap % <span class=\"number\">2</span> == <span class=\"number\">0</span>)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> gap / <span class=\"number\">2</span>;</span><br><span class=\"line\">  <span class=\"keyword\">else</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> (gap + <span class=\"number\">1</span>) / <span class=\"number\">2</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h6 id=\"solution-on-the-Internet\"><a href=\"#solution-on-the-Internet\" class=\"headerlink\" title=\"solution on the Internet\"></a>solution on the Internet</h6><p>参考网上的解法, 优化了一下, 感觉稍微简洁了些, 这里的mid取值是靠左的.所以一开始判断end值</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> searchInsert = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">nums, target</span>) </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (nums.length == <span class=\"number\">0</span>)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> start = <span class=\"number\">0</span>, end = nums.length - <span class=\"number\">1</span>, mid = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (target &gt; nums[end])</span><br><span class=\"line\">    <span class=\"keyword\">return</span> end + <span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"comment\">// if (target &lt; nums[start])</span></span><br><span class=\"line\">  <span class=\"comment\">//   return 0;</span></span><br><span class=\"line\">  <span class=\"comment\">// if (target == nums[start])</span></span><br><span class=\"line\">  <span class=\"comment\">//   return start</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">while</span> (end &gt; start) &#123;</span><br><span class=\"line\">    mid = start + <span class=\"built_in\">parseInt</span>((end - start) / <span class=\"number\">2</span>); <span class=\"comment\">// parseInt 直接丢弃小数部分, 保留整数部分</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'mid: '</span>, mid, <span class=\"string\">' start: '</span>, start, <span class=\"string\">' end: '</span>, end);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (target == nums[start])</span><br><span class=\"line\">      <span class=\"keyword\">return</span> start;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (target == nums[end])</span><br><span class=\"line\">      <span class=\"keyword\">return</span> end;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (target == nums[mid])</span><br><span class=\"line\">      <span class=\"keyword\">return</span> mid;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (target &gt; nums[mid]) &#123;</span><br><span class=\"line\">      start = mid + <span class=\"number\">1</span>;</span><br><span class=\"line\">      <span class=\"comment\">// console.log('target &gt; mid', 'start: ', start);</span></span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      end = mid;</span><br><span class=\"line\">      <span class=\"comment\">// console.log('target &lt; mid', 'end: ', end);</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> start</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n"},{"title":"Greedy Algorithm","abbrlink":"9adfc48b","date":"2020-08-03T02:16:53.000Z","_content":"\n#### [45] Jump Game II\n\n>  Given an array of non-negative integers, you are initially positioned at the first index of the array.\n>\n>  Each element in the array represents your maximum jump length at that position.\n>\n>  Your goal is to reach the last index in the minimum number of jumps.\n\n\n\n贪心算法, 局部解得到最优解.\n\n解题思路: 每次查找当前位置能够到达的位置中, 能跳到最远位置的位置A, 下次就跳到位置A, 然后再从位置A能到达的位置中, 再找能跳到最远位置的位置, 如此循环.\n\n但是官方解答虽然简洁, 但是我不是看的很明白, 还是暂时先贴自己的直白解法吧.\n\n![45_fig1](Greedy-Algorithm/45_fig1.png)\n\n```javascript\n// 对于当前index, 每次在能跳到的范围内\n// 跳到能跳到更远地方的index\nvar jump = function (nums) {\n  let len = nums.length;\n  if (len == 1)\n    return 0;\n  if (nums[0] >= len - 1)\n    return 1\n\n  let step = 0;\n  let nextPosMap = { 'index': 0, 'maxIndex': 0 + nums[0] };\n\n  for (let i = 0; i < len;) {\n    let indexLimit = i + nums[i];\n    // 在寻找下一步跳的位置时, 步数加一\n    step++;\n    for (let j = i + 1; j <= indexLimit && j < len; j++) {\n      if (j + nums[j] > nextPosMap.maxIndex) {\n        nextPosMap.index = j;\n        nextPosMap.maxIndex = j + nums[j];\n      }\n    }\n    // index != i, 说明能跳到更远距离的index更新了, 这时才需要将当前节点 i 移到index\n    // 其实肯定更新, 题目已经说了能跳到最后\n    // 移动才算跳了一步\n    // 同时能跳到的最远位置不要超过数组边界\n    // 超过数组边界则表示步数已经能计算出来了 return\n    if (nextPosMap.maxIndex < len - 1) {\n      i = nextPosMap.index;\n    } else {\n      // 当最大位置能到达最后时, 返回step+1\n      // 把跳到最后位置的一步也加上\n      return step + 1;\n    }\n  }\n};\n```\n\n\n\n#### [55] Jump Game\n\n> Given an array of non-negative integers, you are initially positioned at the first index of the array.\n>\n> Each element in the array represents your maximum jump length at that position.\n>\n> Determine if you are able to reach the last index.\n\n\n\n一开始尝试使用递归做法, 计算所有的可能性, 但是想也不是最好的解法, 最后很可能超时, 果不其然超时.\n\n于是就去看网上解法, 这里的考点是**贪心算法**.\n\n> 贪心算法（又称贪婪算法）是指，在对[问题求解](https://baike.baidu.com/item/问题求解/6693186)时，总是做出在当前看来是最好的选择。也就是说，不从整体最优上加以考虑，算法得到的是在某种意义上的局部最优解\n\n\n\n该题的大概思路是:\n\n数组的第一个元素的值为 reach, 从数组的第一个元素开始, 每次计算在reach范围内的元素们所能到达的最远距离, 是否超过reach, 如果超过了, 就更新reach值为较大值. 直至reach的值超过lastIndex 返回 true.\n\n![largen-reach](Greedy-Algorithm/largen-reach.png)\n\n```javascript\n/**\n * @param {number[]} nums\n * @return {boolean}\n */\n// 递归超时 使用贪心算法求解\n// 局部能够到达的最大范围, 也是全局能够到达的最大范围\nvar canJump = function (nums) {\n  let reach = nums[0];\n  // 需要注意的点是,这里reach的值不一定就>1, 所以i不一定就从1开始\n  // 还是从0开始能够包含所有情况, 这么写因为有个特例 [0]\n  // 同时注意限制 i 的范围, i 是指 reach 能够到达的位置范围, 不能超过 reach\n  for (let i = 0; i < nums.length && i <= reach; i++) {\n    if (nums[i] + i > reach) {\n      reach = nums[i] + i;\n      // console.log(reach);\n    }\n    // 当能到达的范围超过数组的最后 index 时, 返回 true\n    if (reach >= nums.length - 1)\n      return true\n  }\n  // 能到达的元素位置都尝试了, 但是没有一个位置可以到达最后一个元素\n  return false\n};\n```\n\n\n\n","source":"_posts/Greedy-Algorithm.md","raw":"---\ntitle: Greedy Algorithm\ntags:\n  - LeetCode\ncategories: Algorithm\nabbrlink: 9adfc48b\ndate: 2020-08-03 10:16:53\n---\n\n#### [45] Jump Game II\n\n>  Given an array of non-negative integers, you are initially positioned at the first index of the array.\n>\n>  Each element in the array represents your maximum jump length at that position.\n>\n>  Your goal is to reach the last index in the minimum number of jumps.\n\n\n\n贪心算法, 局部解得到最优解.\n\n解题思路: 每次查找当前位置能够到达的位置中, 能跳到最远位置的位置A, 下次就跳到位置A, 然后再从位置A能到达的位置中, 再找能跳到最远位置的位置, 如此循环.\n\n但是官方解答虽然简洁, 但是我不是看的很明白, 还是暂时先贴自己的直白解法吧.\n\n![45_fig1](Greedy-Algorithm/45_fig1.png)\n\n```javascript\n// 对于当前index, 每次在能跳到的范围内\n// 跳到能跳到更远地方的index\nvar jump = function (nums) {\n  let len = nums.length;\n  if (len == 1)\n    return 0;\n  if (nums[0] >= len - 1)\n    return 1\n\n  let step = 0;\n  let nextPosMap = { 'index': 0, 'maxIndex': 0 + nums[0] };\n\n  for (let i = 0; i < len;) {\n    let indexLimit = i + nums[i];\n    // 在寻找下一步跳的位置时, 步数加一\n    step++;\n    for (let j = i + 1; j <= indexLimit && j < len; j++) {\n      if (j + nums[j] > nextPosMap.maxIndex) {\n        nextPosMap.index = j;\n        nextPosMap.maxIndex = j + nums[j];\n      }\n    }\n    // index != i, 说明能跳到更远距离的index更新了, 这时才需要将当前节点 i 移到index\n    // 其实肯定更新, 题目已经说了能跳到最后\n    // 移动才算跳了一步\n    // 同时能跳到的最远位置不要超过数组边界\n    // 超过数组边界则表示步数已经能计算出来了 return\n    if (nextPosMap.maxIndex < len - 1) {\n      i = nextPosMap.index;\n    } else {\n      // 当最大位置能到达最后时, 返回step+1\n      // 把跳到最后位置的一步也加上\n      return step + 1;\n    }\n  }\n};\n```\n\n\n\n#### [55] Jump Game\n\n> Given an array of non-negative integers, you are initially positioned at the first index of the array.\n>\n> Each element in the array represents your maximum jump length at that position.\n>\n> Determine if you are able to reach the last index.\n\n\n\n一开始尝试使用递归做法, 计算所有的可能性, 但是想也不是最好的解法, 最后很可能超时, 果不其然超时.\n\n于是就去看网上解法, 这里的考点是**贪心算法**.\n\n> 贪心算法（又称贪婪算法）是指，在对[问题求解](https://baike.baidu.com/item/问题求解/6693186)时，总是做出在当前看来是最好的选择。也就是说，不从整体最优上加以考虑，算法得到的是在某种意义上的局部最优解\n\n\n\n该题的大概思路是:\n\n数组的第一个元素的值为 reach, 从数组的第一个元素开始, 每次计算在reach范围内的元素们所能到达的最远距离, 是否超过reach, 如果超过了, 就更新reach值为较大值. 直至reach的值超过lastIndex 返回 true.\n\n![largen-reach](Greedy-Algorithm/largen-reach.png)\n\n```javascript\n/**\n * @param {number[]} nums\n * @return {boolean}\n */\n// 递归超时 使用贪心算法求解\n// 局部能够到达的最大范围, 也是全局能够到达的最大范围\nvar canJump = function (nums) {\n  let reach = nums[0];\n  // 需要注意的点是,这里reach的值不一定就>1, 所以i不一定就从1开始\n  // 还是从0开始能够包含所有情况, 这么写因为有个特例 [0]\n  // 同时注意限制 i 的范围, i 是指 reach 能够到达的位置范围, 不能超过 reach\n  for (let i = 0; i < nums.length && i <= reach; i++) {\n    if (nums[i] + i > reach) {\n      reach = nums[i] + i;\n      // console.log(reach);\n    }\n    // 当能到达的范围超过数组的最后 index 时, 返回 true\n    if (reach >= nums.length - 1)\n      return true\n  }\n  // 能到达的元素位置都尝试了, 但是没有一个位置可以到达最后一个元素\n  return false\n};\n```\n\n\n\n","slug":"Greedy-Algorithm","published":1,"updated":"2020-08-03T02:43:00.597Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckdyb5wbm00015z9h5fp86lkh","content":"<h4 id=\"45-Jump-Game-II\"><a href=\"#45-Jump-Game-II\" class=\"headerlink\" title=\"[45] Jump Game II\"></a>[45] Jump Game II</h4><blockquote>\n<p> Given an array of non-negative integers, you are initially positioned at the first index of the array.</p>\n<p> Each element in the array represents your maximum jump length at that position.</p>\n<p> Your goal is to reach the last index in the minimum number of jumps.</p>\n</blockquote>\n<p>贪心算法, 局部解得到最优解.</p>\n<p>解题思路: 每次查找当前位置能够到达的位置中, 能跳到最远位置的位置A, 下次就跳到位置A, 然后再从位置A能到达的位置中, 再找能跳到最远位置的位置, 如此循环.</p>\n<p>但是官方解答虽然简洁, 但是我不是看的很明白, 还是暂时先贴自己的直白解法吧.</p>\n<img src=\"/posts/9adfc48b/45_fig1.png\" class=\"\" title=\"45_fig1\">\n\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 对于当前index, 每次在能跳到的范围内</span></span><br><span class=\"line\"><span class=\"comment\">// 跳到能跳到更远地方的index</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> jump = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">nums</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> len = nums.length;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (len == <span class=\"number\">1</span>)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (nums[<span class=\"number\">0</span>] &gt;= len - <span class=\"number\">1</span>)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">let</span> step = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> nextPosMap = &#123; <span class=\"string\">'index'</span>: <span class=\"number\">0</span>, <span class=\"string\">'maxIndex'</span>: <span class=\"number\">0</span> + nums[<span class=\"number\">0</span>] &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; len;) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> indexLimit = i + nums[i];</span><br><span class=\"line\">    <span class=\"comment\">// 在寻找下一步跳的位置时, 步数加一</span></span><br><span class=\"line\">    step++;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> j = i + <span class=\"number\">1</span>; j &lt;= indexLimit &amp;&amp; j &lt; len; j++) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (j + nums[j] &gt; nextPosMap.maxIndex) &#123;</span><br><span class=\"line\">        nextPosMap.index = j;</span><br><span class=\"line\">        nextPosMap.maxIndex = j + nums[j];</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// index != i, 说明能跳到更远距离的index更新了, 这时才需要将当前节点 i 移到index</span></span><br><span class=\"line\">    <span class=\"comment\">// 其实肯定更新, 题目已经说了能跳到最后</span></span><br><span class=\"line\">    <span class=\"comment\">// 移动才算跳了一步</span></span><br><span class=\"line\">    <span class=\"comment\">// 同时能跳到的最远位置不要超过数组边界</span></span><br><span class=\"line\">    <span class=\"comment\">// 超过数组边界则表示步数已经能计算出来了 return</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (nextPosMap.maxIndex &lt; len - <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">      i = nextPosMap.index;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 当最大位置能到达最后时, 返回step+1</span></span><br><span class=\"line\">      <span class=\"comment\">// 把跳到最后位置的一步也加上</span></span><br><span class=\"line\">      <span class=\"keyword\">return</span> step + <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"55-Jump-Game\"><a href=\"#55-Jump-Game\" class=\"headerlink\" title=\"[55] Jump Game\"></a>[55] Jump Game</h4><blockquote>\n<p>Given an array of non-negative integers, you are initially positioned at the first index of the array.</p>\n<p>Each element in the array represents your maximum jump length at that position.</p>\n<p>Determine if you are able to reach the last index.</p>\n</blockquote>\n<p>一开始尝试使用递归做法, 计算所有的可能性, 但是想也不是最好的解法, 最后很可能超时, 果不其然超时.</p>\n<p>于是就去看网上解法, 这里的考点是<strong>贪心算法</strong>.</p>\n<blockquote>\n<p>贪心算法（又称贪婪算法）是指，在对<a href=\"https://baike.baidu.com/item/问题求解/6693186\" target=\"_blank\" rel=\"noopener\">问题求解</a>时，总是做出在当前看来是最好的选择。也就是说，不从整体最优上加以考虑，算法得到的是在某种意义上的局部最优解</p>\n</blockquote>\n<p>该题的大概思路是:</p>\n<p>数组的第一个元素的值为 reach, 从数组的第一个元素开始, 每次计算在reach范围内的元素们所能到达的最远距离, 是否超过reach, 如果超过了, 就更新reach值为较大值. 直至reach的值超过lastIndex 返回 true.</p>\n<img src=\"/posts/9adfc48b/largen-reach.png\" class=\"\" title=\"largen-reach\">\n\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;number[]&#125;</span> <span class=\"variable\">nums</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return <span class=\"type\">&#123;boolean&#125;</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"comment\">// 递归超时 使用贪心算法求解</span></span><br><span class=\"line\"><span class=\"comment\">// 局部能够到达的最大范围, 也是全局能够到达的最大范围</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> canJump = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">nums</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> reach = nums[<span class=\"number\">0</span>];</span><br><span class=\"line\">  <span class=\"comment\">// 需要注意的点是,这里reach的值不一定就&gt;1, 所以i不一定就从1开始</span></span><br><span class=\"line\">  <span class=\"comment\">// 还是从0开始能够包含所有情况, 这么写因为有个特例 [0]</span></span><br><span class=\"line\">  <span class=\"comment\">// 同时注意限制 i 的范围, i 是指 reach 能够到达的位置范围, 不能超过 reach</span></span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; nums.length &amp;&amp; i &lt;= reach; i++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (nums[i] + i &gt; reach) &#123;</span><br><span class=\"line\">      reach = nums[i] + i;</span><br><span class=\"line\">      <span class=\"comment\">// console.log(reach);</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 当能到达的范围超过数组的最后 index 时, 返回 true</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (reach &gt;= nums.length - <span class=\"number\">1</span>)</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"literal\">true</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// 能到达的元素位置都尝试了, 但是没有一个位置可以到达最后一个元素</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"literal\">false</span></span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n\n\n","site":{"data":{}},"excerpt":"","more":"<h4 id=\"45-Jump-Game-II\"><a href=\"#45-Jump-Game-II\" class=\"headerlink\" title=\"[45] Jump Game II\"></a>[45] Jump Game II</h4><blockquote>\n<p> Given an array of non-negative integers, you are initially positioned at the first index of the array.</p>\n<p> Each element in the array represents your maximum jump length at that position.</p>\n<p> Your goal is to reach the last index in the minimum number of jumps.</p>\n</blockquote>\n<p>贪心算法, 局部解得到最优解.</p>\n<p>解题思路: 每次查找当前位置能够到达的位置中, 能跳到最远位置的位置A, 下次就跳到位置A, 然后再从位置A能到达的位置中, 再找能跳到最远位置的位置, 如此循环.</p>\n<p>但是官方解答虽然简洁, 但是我不是看的很明白, 还是暂时先贴自己的直白解法吧.</p>\n<img src=\"/posts/9adfc48b/45_fig1.png\" class=\"\" title=\"45_fig1\">\n\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 对于当前index, 每次在能跳到的范围内</span></span><br><span class=\"line\"><span class=\"comment\">// 跳到能跳到更远地方的index</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> jump = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">nums</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> len = nums.length;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (len == <span class=\"number\">1</span>)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (nums[<span class=\"number\">0</span>] &gt;= len - <span class=\"number\">1</span>)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">let</span> step = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> nextPosMap = &#123; <span class=\"string\">'index'</span>: <span class=\"number\">0</span>, <span class=\"string\">'maxIndex'</span>: <span class=\"number\">0</span> + nums[<span class=\"number\">0</span>] &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; len;) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> indexLimit = i + nums[i];</span><br><span class=\"line\">    <span class=\"comment\">// 在寻找下一步跳的位置时, 步数加一</span></span><br><span class=\"line\">    step++;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> j = i + <span class=\"number\">1</span>; j &lt;= indexLimit &amp;&amp; j &lt; len; j++) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (j + nums[j] &gt; nextPosMap.maxIndex) &#123;</span><br><span class=\"line\">        nextPosMap.index = j;</span><br><span class=\"line\">        nextPosMap.maxIndex = j + nums[j];</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// index != i, 说明能跳到更远距离的index更新了, 这时才需要将当前节点 i 移到index</span></span><br><span class=\"line\">    <span class=\"comment\">// 其实肯定更新, 题目已经说了能跳到最后</span></span><br><span class=\"line\">    <span class=\"comment\">// 移动才算跳了一步</span></span><br><span class=\"line\">    <span class=\"comment\">// 同时能跳到的最远位置不要超过数组边界</span></span><br><span class=\"line\">    <span class=\"comment\">// 超过数组边界则表示步数已经能计算出来了 return</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (nextPosMap.maxIndex &lt; len - <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">      i = nextPosMap.index;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 当最大位置能到达最后时, 返回step+1</span></span><br><span class=\"line\">      <span class=\"comment\">// 把跳到最后位置的一步也加上</span></span><br><span class=\"line\">      <span class=\"keyword\">return</span> step + <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"55-Jump-Game\"><a href=\"#55-Jump-Game\" class=\"headerlink\" title=\"[55] Jump Game\"></a>[55] Jump Game</h4><blockquote>\n<p>Given an array of non-negative integers, you are initially positioned at the first index of the array.</p>\n<p>Each element in the array represents your maximum jump length at that position.</p>\n<p>Determine if you are able to reach the last index.</p>\n</blockquote>\n<p>一开始尝试使用递归做法, 计算所有的可能性, 但是想也不是最好的解法, 最后很可能超时, 果不其然超时.</p>\n<p>于是就去看网上解法, 这里的考点是<strong>贪心算法</strong>.</p>\n<blockquote>\n<p>贪心算法（又称贪婪算法）是指，在对<a href=\"https://baike.baidu.com/item/问题求解/6693186\" target=\"_blank\" rel=\"noopener\">问题求解</a>时，总是做出在当前看来是最好的选择。也就是说，不从整体最优上加以考虑，算法得到的是在某种意义上的局部最优解</p>\n</blockquote>\n<p>该题的大概思路是:</p>\n<p>数组的第一个元素的值为 reach, 从数组的第一个元素开始, 每次计算在reach范围内的元素们所能到达的最远距离, 是否超过reach, 如果超过了, 就更新reach值为较大值. 直至reach的值超过lastIndex 返回 true.</p>\n<img src=\"/posts/9adfc48b/largen-reach.png\" class=\"\" title=\"largen-reach\">\n\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;number[]&#125;</span> <span class=\"variable\">nums</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return <span class=\"type\">&#123;boolean&#125;</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"comment\">// 递归超时 使用贪心算法求解</span></span><br><span class=\"line\"><span class=\"comment\">// 局部能够到达的最大范围, 也是全局能够到达的最大范围</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> canJump = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">nums</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> reach = nums[<span class=\"number\">0</span>];</span><br><span class=\"line\">  <span class=\"comment\">// 需要注意的点是,这里reach的值不一定就&gt;1, 所以i不一定就从1开始</span></span><br><span class=\"line\">  <span class=\"comment\">// 还是从0开始能够包含所有情况, 这么写因为有个特例 [0]</span></span><br><span class=\"line\">  <span class=\"comment\">// 同时注意限制 i 的范围, i 是指 reach 能够到达的位置范围, 不能超过 reach</span></span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; nums.length &amp;&amp; i &lt;= reach; i++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (nums[i] + i &gt; reach) &#123;</span><br><span class=\"line\">      reach = nums[i] + i;</span><br><span class=\"line\">      <span class=\"comment\">// console.log(reach);</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 当能到达的范围超过数组的最后 index 时, 返回 true</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (reach &gt;= nums.length - <span class=\"number\">1</span>)</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"literal\">true</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// 能到达的元素位置都尝试了, 但是没有一个位置可以到达最后一个元素</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"literal\">false</span></span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n\n\n"},{"title":"Permutations/Combinations/Subsets","abbrlink":"91d834a1","date":"2020-08-03T07:36:23.000Z","_content":"\n#### [78] Subsets\n\n> Given a set of **distinct** integers, *nums*, return all possible subsets (the power set).\n>\n> **Note:** The solution set must not contain duplicate subsets.\n\n\n\n观察全排列/组合/子集问题，它们比较相似，且可以使用一些通用策略解决。\n\n首先，它们的解空间非常大：\n\n- 全排列：N!。\n\n\n- 组合：N!。\n\n\n- 子集：2^N, 每个元素都可能存在或不存在。\n\n\n在它们的指数级解法中，要确保生成的结果 **完整** 且 **无冗余**，有三种常用的方法：\n\n1. 递归\n2. 回溯\n3. 基于二进制位掩码和对应位掩码之间的映射字典生成排列/组合/子集\n\n相比前两种方法，第三种方法将每种情况都简化为二进制数，易于实现和验证。\n\n此外，第三种方法具有**最优的时间复杂度**，可以生成按照字典顺序的输出结果。\n\n\n\n##### solution 1 : 字典排序（二进制排序） 子集\n\n这种解法很巧妙, 由于是全排列问题, 子集的数量与数组长度有关.\n\n数组中的元素, 每个只有在或者不在子集中这两种选择. 对于每一种可能, 都能用二进制来标记.\n\n因此该方法的思路如下:\n\n假设数组为[1, 2, 4], 则子集数量为 2^len= 2^3 = 8\n\n则从 0 - 7 的二进制对应分别为 000-111\n\n每一种可能都对应一种子集详情, 比如 101 对应 [1,4],  001 对应 [4].\n\n![bitmask4](Permutations-Combinations-Subsets/bitmask4.png)\n\n需要注意的点是, 在将十进制转换为二进制时, 需要将二进制的位数扩充至与nums的长度相等.\n\n```javascript\nvar subsets = function (nums) {\n  let len = nums.length;\n  let subSets = [];\n  // 根据数组长度计算器其子集数量\n  let subSetsNum = Math.pow(2, len);\n  for (let i = 0; i < subSetsNum; i++) {\n    // 十进制转换为二进制\n    // 每一个二进制都唯一对应一个子集\n    let setNoStr = i.toString(2);\n    while (setNoStr.length < len) {\n      //如果长度不足 len，前面添加 0\n      setNoStr = '0' + setNoStr;\n    }\n    let setNoList = setNoStr.split('');\n    let subSet = [];\n    for (let j = 0; j < len; j++) {\n      if (setNoList[j] == '1') {\n        subSet.push(nums[j]);\n      }\n    }\n    subSets.push(subSet);\n  }\n  return subSets;\n};\n```\n\n**复杂度分析**\n\n- 时间复杂度：O(N×2^N)，生成所有的子集，并复制到输出列表中。\n- 空间复杂度：O(N×2^N)，存储所有子集，共 n 个元素，每个元素都有可能存在或者不存在。\n\n\n\n##### solution 2 : 递归法\n\n这个解法挺巧妙的, 每次都把新元素加进已有的所有子集, 生成新的子集, 因为每个元素只有在和不在两种情况.\n\n```javascript\nvar subsets = function (nums) {\n  let subSets = [[]];\n  let len = nums.length;\n  if (len == 0)\n    return subSets\n\n  for (let i = 0; i < len; i++) {\n    let l = subSets.length;\n    for (let j = 0; j < l; j++) {\n      let ele = subSets[j].concat([nums[i]]);\n      subSets.push(ele);\n    }\n  }\n  return subSets;\n}\n```\n\n\n\n","source":"_posts/Permutations-Combinations-Subsets.md","raw":"---\ntitle: Permutations/Combinations/Subsets\nabbrlink: 91d834a1\ndate: 2020-08-03 15:36:23\ntags:\n---\n\n#### [78] Subsets\n\n> Given a set of **distinct** integers, *nums*, return all possible subsets (the power set).\n>\n> **Note:** The solution set must not contain duplicate subsets.\n\n\n\n观察全排列/组合/子集问题，它们比较相似，且可以使用一些通用策略解决。\n\n首先，它们的解空间非常大：\n\n- 全排列：N!。\n\n\n- 组合：N!。\n\n\n- 子集：2^N, 每个元素都可能存在或不存在。\n\n\n在它们的指数级解法中，要确保生成的结果 **完整** 且 **无冗余**，有三种常用的方法：\n\n1. 递归\n2. 回溯\n3. 基于二进制位掩码和对应位掩码之间的映射字典生成排列/组合/子集\n\n相比前两种方法，第三种方法将每种情况都简化为二进制数，易于实现和验证。\n\n此外，第三种方法具有**最优的时间复杂度**，可以生成按照字典顺序的输出结果。\n\n\n\n##### solution 1 : 字典排序（二进制排序） 子集\n\n这种解法很巧妙, 由于是全排列问题, 子集的数量与数组长度有关.\n\n数组中的元素, 每个只有在或者不在子集中这两种选择. 对于每一种可能, 都能用二进制来标记.\n\n因此该方法的思路如下:\n\n假设数组为[1, 2, 4], 则子集数量为 2^len= 2^3 = 8\n\n则从 0 - 7 的二进制对应分别为 000-111\n\n每一种可能都对应一种子集详情, 比如 101 对应 [1,4],  001 对应 [4].\n\n![bitmask4](Permutations-Combinations-Subsets/bitmask4.png)\n\n需要注意的点是, 在将十进制转换为二进制时, 需要将二进制的位数扩充至与nums的长度相等.\n\n```javascript\nvar subsets = function (nums) {\n  let len = nums.length;\n  let subSets = [];\n  // 根据数组长度计算器其子集数量\n  let subSetsNum = Math.pow(2, len);\n  for (let i = 0; i < subSetsNum; i++) {\n    // 十进制转换为二进制\n    // 每一个二进制都唯一对应一个子集\n    let setNoStr = i.toString(2);\n    while (setNoStr.length < len) {\n      //如果长度不足 len，前面添加 0\n      setNoStr = '0' + setNoStr;\n    }\n    let setNoList = setNoStr.split('');\n    let subSet = [];\n    for (let j = 0; j < len; j++) {\n      if (setNoList[j] == '1') {\n        subSet.push(nums[j]);\n      }\n    }\n    subSets.push(subSet);\n  }\n  return subSets;\n};\n```\n\n**复杂度分析**\n\n- 时间复杂度：O(N×2^N)，生成所有的子集，并复制到输出列表中。\n- 空间复杂度：O(N×2^N)，存储所有子集，共 n 个元素，每个元素都有可能存在或者不存在。\n\n\n\n##### solution 2 : 递归法\n\n这个解法挺巧妙的, 每次都把新元素加进已有的所有子集, 生成新的子集, 因为每个元素只有在和不在两种情况.\n\n```javascript\nvar subsets = function (nums) {\n  let subSets = [[]];\n  let len = nums.length;\n  if (len == 0)\n    return subSets\n\n  for (let i = 0; i < len; i++) {\n    let l = subSets.length;\n    for (let j = 0; j < l; j++) {\n      let ele = subSets[j].concat([nums[i]]);\n      subSets.push(ele);\n    }\n  }\n  return subSets;\n}\n```\n\n\n\n","slug":"Permutations-Combinations-Subsets","published":1,"updated":"2020-08-05T03:17:38.792Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckdyb5wbp00045z9h4qahe6xm","content":"<h4 id=\"78-Subsets\"><a href=\"#78-Subsets\" class=\"headerlink\" title=\"[78] Subsets\"></a>[78] Subsets</h4><blockquote>\n<p>Given a set of <strong>distinct</strong> integers, <em>nums</em>, return all possible subsets (the power set).</p>\n<p><strong>Note:</strong> The solution set must not contain duplicate subsets.</p>\n</blockquote>\n<p>观察全排列/组合/子集问题，它们比较相似，且可以使用一些通用策略解决。</p>\n<p>首先，它们的解空间非常大：</p>\n<ul>\n<li>全排列：N!。</li>\n</ul>\n<ul>\n<li>组合：N!。</li>\n</ul>\n<ul>\n<li>子集：2^N, 每个元素都可能存在或不存在。</li>\n</ul>\n<p>在它们的指数级解法中，要确保生成的结果 <strong>完整</strong> 且 <strong>无冗余</strong>，有三种常用的方法：</p>\n<ol>\n<li>递归</li>\n<li>回溯</li>\n<li>基于二进制位掩码和对应位掩码之间的映射字典生成排列/组合/子集</li>\n</ol>\n<p>相比前两种方法，第三种方法将每种情况都简化为二进制数，易于实现和验证。</p>\n<p>此外，第三种方法具有<strong>最优的时间复杂度</strong>，可以生成按照字典顺序的输出结果。</p>\n<h5 id=\"solution-1-字典排序（二进制排序）-子集\"><a href=\"#solution-1-字典排序（二进制排序）-子集\" class=\"headerlink\" title=\"solution 1 : 字典排序（二进制排序） 子集\"></a>solution 1 : 字典排序（二进制排序） 子集</h5><p>这种解法很巧妙, 由于是全排列问题, 子集的数量与数组长度有关.</p>\n<p>数组中的元素, 每个只有在或者不在子集中这两种选择. 对于每一种可能, 都能用二进制来标记.</p>\n<p>因此该方法的思路如下:</p>\n<p>假设数组为[1, 2, 4], 则子集数量为 2^len= 2^3 = 8</p>\n<p>则从 0 - 7 的二进制对应分别为 000-111</p>\n<p>每一种可能都对应一种子集详情, 比如 101 对应 [1,4],  001 对应 [4].</p>\n<img src=\"/posts/91d834a1/bitmask4.png\" class=\"\" title=\"bitmask4\">\n\n<p>需要注意的点是, 在将十进制转换为二进制时, 需要将二进制的位数扩充至与nums的长度相等.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> subsets = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">nums</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> len = nums.length;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> subSets = [];</span><br><span class=\"line\">  <span class=\"comment\">// 根据数组长度计算器其子集数量</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> subSetsNum = <span class=\"built_in\">Math</span>.pow(<span class=\"number\">2</span>, len);</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; subSetsNum; i++) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 十进制转换为二进制</span></span><br><span class=\"line\">    <span class=\"comment\">// 每一个二进制都唯一对应一个子集</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> setNoStr = i.toString(<span class=\"number\">2</span>);</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (setNoStr.length &lt; len) &#123;</span><br><span class=\"line\">      <span class=\"comment\">//如果长度不足 len，前面添加 0</span></span><br><span class=\"line\">      setNoStr = <span class=\"string\">'0'</span> + setNoStr;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> setNoList = setNoStr.split(<span class=\"string\">''</span>);</span><br><span class=\"line\">    <span class=\"keyword\">let</span> subSet = [];</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> j = <span class=\"number\">0</span>; j &lt; len; j++) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (setNoList[j] == <span class=\"string\">'1'</span>) &#123;</span><br><span class=\"line\">        subSet.push(nums[j]);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    subSets.push(subSet);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> subSets;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p><strong>复杂度分析</strong></p>\n<ul>\n<li>时间复杂度：O(N×2^N)，生成所有的子集，并复制到输出列表中。</li>\n<li>空间复杂度：O(N×2^N)，存储所有子集，共 n 个元素，每个元素都有可能存在或者不存在。</li>\n</ul>\n<h5 id=\"solution-2-递归法\"><a href=\"#solution-2-递归法\" class=\"headerlink\" title=\"solution 2 : 递归法\"></a>solution 2 : 递归法</h5><p>这个解法挺巧妙的, 每次都把新元素加进已有的所有子集, 生成新的子集, 因为每个元素只有在和不在两种情况.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> subsets = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">nums</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> subSets = [[]];</span><br><span class=\"line\">  <span class=\"keyword\">let</span> len = nums.length;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (len == <span class=\"number\">0</span>)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> subSets</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; len; i++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> l = subSets.length;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> j = <span class=\"number\">0</span>; j &lt; l; j++) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">let</span> ele = subSets[j].concat([nums[i]]);</span><br><span class=\"line\">      subSets.push(ele);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> subSets;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n","site":{"data":{}},"excerpt":"","more":"<h4 id=\"78-Subsets\"><a href=\"#78-Subsets\" class=\"headerlink\" title=\"[78] Subsets\"></a>[78] Subsets</h4><blockquote>\n<p>Given a set of <strong>distinct</strong> integers, <em>nums</em>, return all possible subsets (the power set).</p>\n<p><strong>Note:</strong> The solution set must not contain duplicate subsets.</p>\n</blockquote>\n<p>观察全排列/组合/子集问题，它们比较相似，且可以使用一些通用策略解决。</p>\n<p>首先，它们的解空间非常大：</p>\n<ul>\n<li>全排列：N!。</li>\n</ul>\n<ul>\n<li>组合：N!。</li>\n</ul>\n<ul>\n<li>子集：2^N, 每个元素都可能存在或不存在。</li>\n</ul>\n<p>在它们的指数级解法中，要确保生成的结果 <strong>完整</strong> 且 <strong>无冗余</strong>，有三种常用的方法：</p>\n<ol>\n<li>递归</li>\n<li>回溯</li>\n<li>基于二进制位掩码和对应位掩码之间的映射字典生成排列/组合/子集</li>\n</ol>\n<p>相比前两种方法，第三种方法将每种情况都简化为二进制数，易于实现和验证。</p>\n<p>此外，第三种方法具有<strong>最优的时间复杂度</strong>，可以生成按照字典顺序的输出结果。</p>\n<h5 id=\"solution-1-字典排序（二进制排序）-子集\"><a href=\"#solution-1-字典排序（二进制排序）-子集\" class=\"headerlink\" title=\"solution 1 : 字典排序（二进制排序） 子集\"></a>solution 1 : 字典排序（二进制排序） 子集</h5><p>这种解法很巧妙, 由于是全排列问题, 子集的数量与数组长度有关.</p>\n<p>数组中的元素, 每个只有在或者不在子集中这两种选择. 对于每一种可能, 都能用二进制来标记.</p>\n<p>因此该方法的思路如下:</p>\n<p>假设数组为[1, 2, 4], 则子集数量为 2^len= 2^3 = 8</p>\n<p>则从 0 - 7 的二进制对应分别为 000-111</p>\n<p>每一种可能都对应一种子集详情, 比如 101 对应 [1,4],  001 对应 [4].</p>\n<img src=\"/posts/91d834a1/bitmask4.png\" class=\"\" title=\"bitmask4\">\n\n<p>需要注意的点是, 在将十进制转换为二进制时, 需要将二进制的位数扩充至与nums的长度相等.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> subsets = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">nums</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> len = nums.length;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> subSets = [];</span><br><span class=\"line\">  <span class=\"comment\">// 根据数组长度计算器其子集数量</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> subSetsNum = <span class=\"built_in\">Math</span>.pow(<span class=\"number\">2</span>, len);</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; subSetsNum; i++) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 十进制转换为二进制</span></span><br><span class=\"line\">    <span class=\"comment\">// 每一个二进制都唯一对应一个子集</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> setNoStr = i.toString(<span class=\"number\">2</span>);</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (setNoStr.length &lt; len) &#123;</span><br><span class=\"line\">      <span class=\"comment\">//如果长度不足 len，前面添加 0</span></span><br><span class=\"line\">      setNoStr = <span class=\"string\">'0'</span> + setNoStr;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> setNoList = setNoStr.split(<span class=\"string\">''</span>);</span><br><span class=\"line\">    <span class=\"keyword\">let</span> subSet = [];</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> j = <span class=\"number\">0</span>; j &lt; len; j++) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (setNoList[j] == <span class=\"string\">'1'</span>) &#123;</span><br><span class=\"line\">        subSet.push(nums[j]);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    subSets.push(subSet);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> subSets;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p><strong>复杂度分析</strong></p>\n<ul>\n<li>时间复杂度：O(N×2^N)，生成所有的子集，并复制到输出列表中。</li>\n<li>空间复杂度：O(N×2^N)，存储所有子集，共 n 个元素，每个元素都有可能存在或者不存在。</li>\n</ul>\n<h5 id=\"solution-2-递归法\"><a href=\"#solution-2-递归法\" class=\"headerlink\" title=\"solution 2 : 递归法\"></a>solution 2 : 递归法</h5><p>这个解法挺巧妙的, 每次都把新元素加进已有的所有子集, 生成新的子集, 因为每个元素只有在和不在两种情况.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> subsets = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">nums</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> subSets = [[]];</span><br><span class=\"line\">  <span class=\"keyword\">let</span> len = nums.length;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (len == <span class=\"number\">0</span>)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> subSets</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; len; i++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> l = subSets.length;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> j = <span class=\"number\">0</span>; j &lt; l; j++) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">let</span> ele = subSets[j].concat([nums[i]]);</span><br><span class=\"line\">      subSets.push(ele);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> subSets;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n"},{"title":"String","abbrlink":"9912b79f","_content":"\n#### [43] Multiply Strings\n\n> Given two non-negative integers `num1` and `num2` represented as strings, return the product of `num1` and `num2`, also represented as a string.\n\n算法答题思路就是模拟乘法累加的过程. \n\n需要注意的是, js大数相加会丢失精度, 所以谨慎使用.\n\n```javascript\n/**\n * @param {string} num1\n * @param {string} num2\n * @return {string}\n */\n// js大数相加容易丢失精度, 有安全范围, 不行\n/**\n * \n * 整个算法的过程模拟乘法的计算过程\n * 用一个数组来存储每一步计算的结果\n * 时间复杂度: n^2\n */\nvar multiply = function (num1, num2) {\n  // 有一个参数为0,则结果为0\n  if (num1 == '0' || num2 == '0')\n    return '0';\n  let len1 = num1.length,\n    len2 = num2.length,\n    len = len1 + len2;\n  // 数组存储计算结果 长度暂时为两个字符串长度之和\n  let resArr = new Array(len);\n  // 初始化结果数组\n  for (let i = 0; i < len; i++) {\n    resArr[i] = 0;\n  }\n  // 循环反过来的原因是: 每次都是先拿因数1的每一位与因数2的同一位相乘\n  for (let j = len2 - 1; j >= 0; j--) {\n    let n2 = parseInt(num2[j]);\n    // 计算结果放置的位置\n    let pos = len - len2 + j;\n    for (let i = len1 - 1; i >= 0; i--) {\n      let n1 = parseInt(num1[i]);\n      let res = n1 * n2;\n      addNext(res, resArr, pos, 1);\n      // 数位升高一位, 结果放置也要对应往左一位\n      pos--;\n    }\n  }\n  // 去除结果数组最左边的 0\n  while (resArr[0] == '0') {\n    resArr.shift()\n  }\n  return resArr.join('');\n};\n\n// flag 为 1 表示要与当前位置数值相加\n// 为 0 则表示不用相加\nvar addNext = (num, resArr, pos, flag) => {\n  let posNum = num % 10, // 取余数 置于当前位置\n    addNum = Math.floor(num / 10); // floor 向下取整\n\n  resArr[pos] = (flag == 1) ? resArr[pos] + posNum : posNum;\n  resArr[pos - 1] += addNum;\n\n  if (resArr[pos] >= 10) {\n    // 与当前数值相加之后, 数值大于10, 则当前仍然需要进位\n    // 但是不需要再与当前位置数值相加了\n    addNext(resArr[pos], resArr, pos, 0);\n  }\n  // 进位最多只会等于 10\n  if (resArr[pos - 1] == 10) {\n    addNext(resArr[pos - 1], resArr, pos - 1, 0);\n  }\n}\n```\n\n","source":"_posts/String.md","raw":"---\ntitle: String\ntags:\n  - LeetCode\ncategories: Algorithm\nabbrlink: 9912b79f\n---\n\n#### [43] Multiply Strings\n\n> Given two non-negative integers `num1` and `num2` represented as strings, return the product of `num1` and `num2`, also represented as a string.\n\n算法答题思路就是模拟乘法累加的过程. \n\n需要注意的是, js大数相加会丢失精度, 所以谨慎使用.\n\n```javascript\n/**\n * @param {string} num1\n * @param {string} num2\n * @return {string}\n */\n// js大数相加容易丢失精度, 有安全范围, 不行\n/**\n * \n * 整个算法的过程模拟乘法的计算过程\n * 用一个数组来存储每一步计算的结果\n * 时间复杂度: n^2\n */\nvar multiply = function (num1, num2) {\n  // 有一个参数为0,则结果为0\n  if (num1 == '0' || num2 == '0')\n    return '0';\n  let len1 = num1.length,\n    len2 = num2.length,\n    len = len1 + len2;\n  // 数组存储计算结果 长度暂时为两个字符串长度之和\n  let resArr = new Array(len);\n  // 初始化结果数组\n  for (let i = 0; i < len; i++) {\n    resArr[i] = 0;\n  }\n  // 循环反过来的原因是: 每次都是先拿因数1的每一位与因数2的同一位相乘\n  for (let j = len2 - 1; j >= 0; j--) {\n    let n2 = parseInt(num2[j]);\n    // 计算结果放置的位置\n    let pos = len - len2 + j;\n    for (let i = len1 - 1; i >= 0; i--) {\n      let n1 = parseInt(num1[i]);\n      let res = n1 * n2;\n      addNext(res, resArr, pos, 1);\n      // 数位升高一位, 结果放置也要对应往左一位\n      pos--;\n    }\n  }\n  // 去除结果数组最左边的 0\n  while (resArr[0] == '0') {\n    resArr.shift()\n  }\n  return resArr.join('');\n};\n\n// flag 为 1 表示要与当前位置数值相加\n// 为 0 则表示不用相加\nvar addNext = (num, resArr, pos, flag) => {\n  let posNum = num % 10, // 取余数 置于当前位置\n    addNum = Math.floor(num / 10); // floor 向下取整\n\n  resArr[pos] = (flag == 1) ? resArr[pos] + posNum : posNum;\n  resArr[pos - 1] += addNum;\n\n  if (resArr[pos] >= 10) {\n    // 与当前数值相加之后, 数值大于10, 则当前仍然需要进位\n    // 但是不需要再与当前位置数值相加了\n    addNext(resArr[pos], resArr, pos, 0);\n  }\n  // 进位最多只会等于 10\n  if (resArr[pos - 1] == 10) {\n    addNext(resArr[pos - 1], resArr, pos - 1, 0);\n  }\n}\n```\n\n","slug":"String","published":1,"date":"2020-08-17T09:16:00.722Z","updated":"2020-08-17T09:20:11.526Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckdyb5wbq00055z9h2y0req61","content":"<h4 id=\"43-Multiply-Strings\"><a href=\"#43-Multiply-Strings\" class=\"headerlink\" title=\"[43] Multiply Strings\"></a>[43] Multiply Strings</h4><blockquote>\n<p>Given two non-negative integers <code>num1</code> and <code>num2</code> represented as strings, return the product of <code>num1</code> and <code>num2</code>, also represented as a string.</p>\n</blockquote>\n<p>算法答题思路就是模拟乘法累加的过程. </p>\n<p>需要注意的是, js大数相加会丢失精度, 所以谨慎使用.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;string&#125;</span> <span class=\"variable\">num1</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;string&#125;</span> <span class=\"variable\">num2</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return <span class=\"type\">&#123;string&#125;</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"comment\">// js大数相加容易丢失精度, 有安全范围, 不行</span></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * </span></span><br><span class=\"line\"><span class=\"comment\"> * 整个算法的过程模拟乘法的计算过程</span></span><br><span class=\"line\"><span class=\"comment\"> * 用一个数组来存储每一步计算的结果</span></span><br><span class=\"line\"><span class=\"comment\"> * 时间复杂度: n^2</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> multiply = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">num1, num2</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 有一个参数为0,则结果为0</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (num1 == <span class=\"string\">'0'</span> || num2 == <span class=\"string\">'0'</span>)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">'0'</span>;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> len1 = num1.length,</span><br><span class=\"line\">    len2 = num2.length,</span><br><span class=\"line\">    len = len1 + len2;</span><br><span class=\"line\">  <span class=\"comment\">// 数组存储计算结果 长度暂时为两个字符串长度之和</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> resArr = <span class=\"keyword\">new</span> <span class=\"built_in\">Array</span>(len);</span><br><span class=\"line\">  <span class=\"comment\">// 初始化结果数组</span></span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; len; i++) &#123;</span><br><span class=\"line\">    resArr[i] = <span class=\"number\">0</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// 循环反过来的原因是: 每次都是先拿因数1的每一位与因数2的同一位相乘</span></span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> j = len2 - <span class=\"number\">1</span>; j &gt;= <span class=\"number\">0</span>; j--) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> n2 = <span class=\"built_in\">parseInt</span>(num2[j]);</span><br><span class=\"line\">    <span class=\"comment\">// 计算结果放置的位置</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> pos = len - len2 + j;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = len1 - <span class=\"number\">1</span>; i &gt;= <span class=\"number\">0</span>; i--) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">let</span> n1 = <span class=\"built_in\">parseInt</span>(num1[i]);</span><br><span class=\"line\">      <span class=\"keyword\">let</span> res = n1 * n2;</span><br><span class=\"line\">      addNext(res, resArr, pos, <span class=\"number\">1</span>);</span><br><span class=\"line\">      <span class=\"comment\">// 数位升高一位, 结果放置也要对应往左一位</span></span><br><span class=\"line\">      pos--;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// 去除结果数组最左边的 0</span></span><br><span class=\"line\">  <span class=\"keyword\">while</span> (resArr[<span class=\"number\">0</span>] == <span class=\"string\">'0'</span>) &#123;</span><br><span class=\"line\">    resArr.shift()</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> resArr.join(<span class=\"string\">''</span>);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// flag 为 1 表示要与当前位置数值相加</span></span><br><span class=\"line\"><span class=\"comment\">// 为 0 则表示不用相加</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> addNext = <span class=\"function\">(<span class=\"params\">num, resArr, pos, flag</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> posNum = num % <span class=\"number\">10</span>, <span class=\"comment\">// 取余数 置于当前位置</span></span><br><span class=\"line\">    addNum = <span class=\"built_in\">Math</span>.floor(num / <span class=\"number\">10</span>); <span class=\"comment\">// floor 向下取整</span></span><br><span class=\"line\"></span><br><span class=\"line\">  resArr[pos] = (flag == <span class=\"number\">1</span>) ? resArr[pos] + posNum : posNum;</span><br><span class=\"line\">  resArr[pos - <span class=\"number\">1</span>] += addNum;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (resArr[pos] &gt;= <span class=\"number\">10</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 与当前数值相加之后, 数值大于10, 则当前仍然需要进位</span></span><br><span class=\"line\">    <span class=\"comment\">// 但是不需要再与当前位置数值相加了</span></span><br><span class=\"line\">    addNext(resArr[pos], resArr, pos, <span class=\"number\">0</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// 进位最多只会等于 10</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (resArr[pos - <span class=\"number\">1</span>] == <span class=\"number\">10</span>) &#123;</span><br><span class=\"line\">    addNext(resArr[pos - <span class=\"number\">1</span>], resArr, pos - <span class=\"number\">1</span>, <span class=\"number\">0</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"","more":"<h4 id=\"43-Multiply-Strings\"><a href=\"#43-Multiply-Strings\" class=\"headerlink\" title=\"[43] Multiply Strings\"></a>[43] Multiply Strings</h4><blockquote>\n<p>Given two non-negative integers <code>num1</code> and <code>num2</code> represented as strings, return the product of <code>num1</code> and <code>num2</code>, also represented as a string.</p>\n</blockquote>\n<p>算法答题思路就是模拟乘法累加的过程. </p>\n<p>需要注意的是, js大数相加会丢失精度, 所以谨慎使用.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;string&#125;</span> <span class=\"variable\">num1</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;string&#125;</span> <span class=\"variable\">num2</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return <span class=\"type\">&#123;string&#125;</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"comment\">// js大数相加容易丢失精度, 有安全范围, 不行</span></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * </span></span><br><span class=\"line\"><span class=\"comment\"> * 整个算法的过程模拟乘法的计算过程</span></span><br><span class=\"line\"><span class=\"comment\"> * 用一个数组来存储每一步计算的结果</span></span><br><span class=\"line\"><span class=\"comment\"> * 时间复杂度: n^2</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> multiply = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">num1, num2</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 有一个参数为0,则结果为0</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (num1 == <span class=\"string\">'0'</span> || num2 == <span class=\"string\">'0'</span>)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">'0'</span>;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> len1 = num1.length,</span><br><span class=\"line\">    len2 = num2.length,</span><br><span class=\"line\">    len = len1 + len2;</span><br><span class=\"line\">  <span class=\"comment\">// 数组存储计算结果 长度暂时为两个字符串长度之和</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> resArr = <span class=\"keyword\">new</span> <span class=\"built_in\">Array</span>(len);</span><br><span class=\"line\">  <span class=\"comment\">// 初始化结果数组</span></span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; len; i++) &#123;</span><br><span class=\"line\">    resArr[i] = <span class=\"number\">0</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// 循环反过来的原因是: 每次都是先拿因数1的每一位与因数2的同一位相乘</span></span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> j = len2 - <span class=\"number\">1</span>; j &gt;= <span class=\"number\">0</span>; j--) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> n2 = <span class=\"built_in\">parseInt</span>(num2[j]);</span><br><span class=\"line\">    <span class=\"comment\">// 计算结果放置的位置</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> pos = len - len2 + j;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = len1 - <span class=\"number\">1</span>; i &gt;= <span class=\"number\">0</span>; i--) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">let</span> n1 = <span class=\"built_in\">parseInt</span>(num1[i]);</span><br><span class=\"line\">      <span class=\"keyword\">let</span> res = n1 * n2;</span><br><span class=\"line\">      addNext(res, resArr, pos, <span class=\"number\">1</span>);</span><br><span class=\"line\">      <span class=\"comment\">// 数位升高一位, 结果放置也要对应往左一位</span></span><br><span class=\"line\">      pos--;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// 去除结果数组最左边的 0</span></span><br><span class=\"line\">  <span class=\"keyword\">while</span> (resArr[<span class=\"number\">0</span>] == <span class=\"string\">'0'</span>) &#123;</span><br><span class=\"line\">    resArr.shift()</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> resArr.join(<span class=\"string\">''</span>);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// flag 为 1 表示要与当前位置数值相加</span></span><br><span class=\"line\"><span class=\"comment\">// 为 0 则表示不用相加</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> addNext = <span class=\"function\">(<span class=\"params\">num, resArr, pos, flag</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> posNum = num % <span class=\"number\">10</span>, <span class=\"comment\">// 取余数 置于当前位置</span></span><br><span class=\"line\">    addNum = <span class=\"built_in\">Math</span>.floor(num / <span class=\"number\">10</span>); <span class=\"comment\">// floor 向下取整</span></span><br><span class=\"line\"></span><br><span class=\"line\">  resArr[pos] = (flag == <span class=\"number\">1</span>) ? resArr[pos] + posNum : posNum;</span><br><span class=\"line\">  resArr[pos - <span class=\"number\">1</span>] += addNum;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (resArr[pos] &gt;= <span class=\"number\">10</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 与当前数值相加之后, 数值大于10, 则当前仍然需要进位</span></span><br><span class=\"line\">    <span class=\"comment\">// 但是不需要再与当前位置数值相加了</span></span><br><span class=\"line\">    addNext(resArr[pos], resArr, pos, <span class=\"number\">0</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// 进位最多只会等于 10</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (resArr[pos - <span class=\"number\">1</span>] == <span class=\"number\">10</span>) &#123;</span><br><span class=\"line\">    addNext(resArr[pos - <span class=\"number\">1</span>], resArr, pos - <span class=\"number\">1</span>, <span class=\"number\">0</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n"},{"title":"Vue Learning","abbrlink":"c1889358","date":"2020-07-29T05:34:01.000Z","_content":"\n","source":"_posts/Vue-Learning.md","raw":"---\ntitle: Vue Learning\nabbrlink: c1889358\ndate: 2020-07-29 13:34:01\ntags: [Vue, js]\ncategories: 前端框架\n---\n\n","slug":"Vue-Learning","published":1,"updated":"2020-07-29T05:38:25.879Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckdyb5wbr00065z9ha2u2dh2f","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"Two Pointers","abbrlink":"b6a54014","date":"2020-07-30T02:03:54.000Z","_content":"\n\n\n#### [11] Container With Most Water\n\n> Given *n* non-negative integers *a1*, *a2*, ..., *an* , where each represents a point at coordinate (*i*, *ai*). *n* vertical lines are drawn such that the two endpoints of line *i* is at (*i*, *ai*) and (*i*, 0). Find two lines, which together with x-axis forms a container, such that the container contains the most water.\n>\n> **Note:** You may not slant the container and *n* is at least 2.\n\n\n\n###### my solution : Brute Force\n\n穷举所有面积的可能性,最后对面积进行排序,找到最大值.\n\n中间一度尝试过将 `partArea` 组成数组先排序,也还是超时.\n\n```javascript\nvar maxArea = function (height) {\n  let partMaxSet = new Set();\n  for (let i = 0; i < height.length - 1; i++) {\n    for (let j = i + 1; j < height.length; j++) {\n      let yVal = height[j] < height[i] ? height[j] : height[i];\n      let partArea = (j - i) * yVal;\n      partMaxSet.add(partArea);\n    }\n  }\n  let partMaxList = Array.from(partMaxSet);\n  // 数字降序排列\n  partMaxList.sort(function (a, b) { return b - a });\n  return partMaxList[0];\n  // return Math.max.apply(null, partMaxList);\n};\n```\n\n\n\n###### Two pointers\n\n采用双指针做法, 对于 S(i, j) 来说, 都是每次向里移动一步.\n\n移动短板, 短板有可能变长, 面积有可能变大.\n\n但是移动长板,  短板只会不变或者变小, 因为盛水的体积取决于短板, 所以面积只会不变或变小.\n\n```js\n// 此算法需要证明\nvar maxArea = function (height) {\n  let i = 0, j = height.length - 1;\n  let areaList = new Array();\n  while (j - i > 0) {\n    if (height[i] < height[j]) {\n      // 计算面积以短边为准\n      areaList.push((j - i) * height[i]);\n      // 移动短边有可能获得更大面积\n      i++;\n    } else {\n      areaList.push((j - i) * height[j]);\n      j--;\n    }\n  }\n  // 将可能的面积列表倒序排列,返回第一个\n  return areaList.sort((a, b) => b - a)[0]\n}\n```\n\n**Complexity Analysis**\n\n- Time complexity : O(n)*O*(*n*). Single pass.\n- Space complexity : O(1)*O*(1). Constant space is used.\n\n\n\n#### [26] Remove Duplicates from Sorted Array\n\n> Given a sorted array *nums*, remove the duplicates [**in-place**](https://en.wikipedia.org/wiki/In-place_algorithm) such that each element appear only *once* and return the new length.\n>\n> Do not allocate extra space for another array, you must do this by **modifying the input array [in-place](https://en.wikipedia.org/wiki/In-place_algorithm)** with O(1) extra memory.\n\n\n\n###### my solution\n\n借用 js 数组splice方法\n\n```javascript\nvar removeDuplicates = function (nums) {\n  for (let i = 0; i < nums.length; i++) {\n    let j = i+1;\n    while (nums[j] == nums[i]) {\n      nums.splice(j, 1);\n    }\n  }\n};\n```\n\n\n\n###### Two pointers\n\n```javascript\n// 参考双指针的方法, 优化了解法\n// js的数组越界不会报错,只会得到 undefined 值\nvar removeDuplicates = function (nums) {\n  let i = 0;\n  for (let j = 0; j < nums.length; j++) {\n    if (nums[j] != nums[j + 1]) {\n      nums[i] = nums[j];\n      i++;\n    }\n  }\n  return i;\n};\n```\n\n\n\n#### [27] Remove Element\n\n> Given an array *nums* and a value *val*, remove all instances of that value [**in-place**](https://en.wikipedia.org/wiki/In-place_algorithm) and return the new length.\n>\n> Do not allocate extra space for another array, you must do this by **modifying the input array [in-place](https://en.wikipedia.org/wiki/In-place_algorithm)** with O(1) extra memory.\n>\n> The order of elements can be changed. It doesn't matter what you leave beyond the new length.\n\n\n\n###### my solution\n\n我自己的解法是利用了js数组操作的特性, 可以直接删除数组元素然后剩余元素位置前移的那种,比较方便,但是运行效果不咋地.\n\n```javascript\n// solution 1\nvar removeElement = function (nums, val) {\n  for (let i = 0; i < nums.length; i++) {\n    // 使用 while 保证对于同一个i, 去除该位置所有与val相等的值\n    // 不会遗漏由于删除数组元素而位置前移的新元素\n    while (nums[i] == val) {\n      nums.splice(i, 1)\n    }\n  }\n};\n```\n\n\n\n###### Two pointers\n\n下面的解法是参考了示例解法, 双指针解法. 我觉得很精巧.\n\n主要思路是, 将需要保留的元素都赋值给数组的前部分, 使用 i 标记赋值的位置.\n\n```javascript\n// solution two pointers\n// 只保留与val不同的元素\n// 赋值操作比起splice的删除操作 肯定速度更快 至于额外的空间 需要看splice的实现有没有占用了\nvar removeElement = function (nums, val) {\n  let i = 0;\n  for (let j = 0; j < nums.length; j++) {\n    if (nums[j] != val) {\n      nums[i] = nums[j];\n      // console.log(\"i=\", i, \" \", nums[i]);\n      i++;\n    }\n  }\n  return i;\n};\n```\n\n最差的情况应该是, 没有一个一样的, 但是遍历数组两遍而不是嵌套, 所以是 O(n).\n\n**Complexity analysis**\n\n- Time complexity : O(n). Assume the array has a total of n*n* elements, both *i* and *j* traverse at most 2*n* steps.\n- Space complexity : O(1).\n\n\n\n#### [15] 3Sum\n\n> Given an array `nums` of *n* integers, are there elements *a*, *b*, *c* in `nums` such that *a* + *b* + *c* = 0? Find all unique triplets in the array which gives the sum of zero.\n>\n> **Note:**\n>\n> The solution set must not contain duplicate triplets.\n\n数组排序后, 方便去除重复的元素 + 双指针移动不用嵌套且有方向可循.\n\n```javascript\n// solution 2 ：将数组排序后的双指针解法\nvar threeSum = function (nums) {\n  nums = nums.sort((a, b) => a - b); // 将数组正序排列\n  let len = nums.length;\n  let res = [];\n  for (let i = 0; i < len - 2; i++) {\n    // 第一个数大于 0，肯定加起来和不为0了\n    if (nums[i] > 0) {\n      break;\n    }\n    // 去掉重复元素\n    if (i > 0 && nums[i] == nums[i - 1])\n      continue;\n    let target = -nums[i];\n    let left = i + 1, right = len - 1;\n    while (left < right) {\n      if (nums[left] + nums[right] == target) {\n        res.push([nums[i], nums[left], nums[right]]);\n        left++;\n        right--;\n        // 这里是否判断 left < right 都没有那么重要, 因为最外面还会再判断一次\n        // 但是加上判断可能会少做一次计算\n        // 去掉重复元素\n        while (left < right && nums[left] == nums[left - 1]) {\n          left++;\n        }\n        while (left < right && nums[right] == nums[right + 1]) {\n          right--;\n        }\n      } else if (nums[left] + nums[right] < target) {\n        left++;\n      } else {\n        right--;\n      }\n    }\n  }\n  return res;\n};\n```\n\n\n\n#### [16] 3Sum Closest\n\n> Given an array `nums` of *n* integers and an integer `target`, find three integers in `nums` such that the sum is closest to `target`. Return the sum of the three integers. You may assume that each input would have exactly one solution.\n\n注意这里不是找相等, 而是保留最接近target的值, 实现方法类似.\n\n与target比较, 由于一直在找最接近的, 比target小就left++, 比target大就right--, 总之就是不断靠近target.\n\n```javascript\nvar threeSumClosest = function (nums, target) {\n  nums = nums.sort((a, b) => a - b);\n  let closest = nums[0] + nums[1] + nums[2];\n  let diff = Math.abs(closest - target);\n  let len = nums.length;\n  for (let i = 0; i < len - 2; i++) {\n    // 由于数组是排好序的\n    // 如果nums[i] * 3 > target, 则 nums[i]+nums[i+1]+nums[i+2] 是接下来遍历的最小值\n    // 后面差距只会越来越大\n    // 将接下来最小值与当前最小值closest分别与target比较, 返回与target差距较小的那个值\n    // 优化部分\n    if (nums[i] * 3 > target) {\n      let cDiff = Math.abs(closest - target);\n      let tempMin = nums[i] + nums[i + 1] + nums[i + 2];\n      let tDiff = Math.abs(tempMin - target);\n      return cDiff < tDiff ? closest : tempMin;\n    }\n    // 双指针 遍历数组剩余元素\n    let left = i + 1, right = len - 1;\n    while (left < right) {\n      let sum = nums[i] + nums[left] + nums[right];\n      let newDiff = Math.abs(sum - target);\n      if (newDiff == 0) {\n        return target\n      }\n      if (newDiff < diff) {\n        diff = newDiff;\n        closest = sum;\n      }\n      if (sum < target)\n        left++;\n      else\n        right--;\n    }\n  }\n  // console.log('closest:', closest);\n  return closest;\n};\n```\n\n\n\n#### [18] 4Sum\n\n> Given an array `nums` of *n* integers and an integer `target`, are there elements *a*, *b*, *c*, and *d*in `nums` such that *a* + *b* + *c* + *d* = `target`? Find all unique quadruplets in the array which gives the sum of `target`.\n>\n> **Note:**\n>\n> The solution set must not contain duplicate quadruplets.\n\n有了双指针, nSum都可解, 不过这个嵌套有点多,估计有更巧妙的解法.\n\n```javascript\nvar fourSum = function (nums, target) {\n  nums = nums.sort((a, b) => a - b);\n  let len = nums.length, res = [];\n  for (let i = 0; i < len - 3; i++) {\n    // 去重\n    if (nums[i] == nums[i - 1] && i > 0)\n      continue;\n\n    for (let j = i + 1; j < len - 2; j++) {\n\n      if (nums[j] == nums[j - 1] && j > i + 1)\n        continue;\n        \n      let t = target - nums[i] - nums[j];\n      let left = j + 1, right = len - 1;\n\n      while (left < right) {\n        let twoSum = nums[left] + nums[right];\n        if (twoSum == t) {\n          res.push([nums[i], nums[j], nums[left], nums[right]]);\n          left++;\n          right--;\n          // 去重\n          while (left < right && nums[left] == nums[left - 1])\n            left++;\n          while (left < right && nums[right] == nums[right + 1])\n            right--;\n        } else if (twoSum > t) {\n          right--;\n        } else {\n          left++;\n        }\n      }\n    }\n  }\n  // console.log(res);\n  return res;\n};\n```\n\n\n\n#### [283] Move Zeroes\n\n> Given an array `nums`, write a function to move all `0`'s to the end of it while maintaining the relative order of the non-zero elements.\n>\n> **Note**:\n>\n> 1. You must do this **in-place** without making a copy of the array.\n> 2. Minimize the total number of operations.\n\n\n\n双指针解法, 一次成功.\n\n```javascript\n// solution: two pointers\n// 借鉴之前的做题经验, 这题算是完成的比较快\nvar moveZeroes = function (nums) {\n  let len = nums.length, i = 0;\n  for (let j = 0; j < len; j++) {\n    if (nums[j] != 0) {\n      nums[i] = nums[j];\n      i++;\n    }\n  }\n  for (let t = i; t < len; t++) {\n    nums[t] = 0;\n  }\n  // console.log(nums);\n  return nums;\n};\n```\n\n\n\n#### [66] Plus One\n\n> Given a **non-empty** array of digits representing a non-negative integer, increment one to the integer.\n>\n> The digits are stored such that the most significant digit is at the head of the list, and each element in the array contains a single digit.\n>\n> You may assume the integer does not contain any leading zero, except the number 0 itself.\n\n\n\n主要是运用数组特性.不是很难, 理解题意即可.\n\n还挺多人不喜欢这道题的, 可能觉得太弱智了?...\n\n```javascript\nvar plusOne = function (digits) {\n  let len = digits.length;\n  // c 表示进位\n  let i = len - 1, c = 1;\n  while (i >= 0) {\n    // 没有向前进位, 就 +1 结束\n    if (digits[i] + c < 10) {\n      digits[i]++;\n      break;\n    } else if (i == 0) { \n      // 首位元素 +1 后有进位, 向数组头部插入 1 结束\n      digits[i] = 0;\n      digits.unshift(1);\n      break;\n    } else {\n      // 不是首位元素 +1 后有进位\n      // 当前元素设为 0 , 继续看更高位元素\n      digits[i] = 0;\n      i--;\n    }\n  }\n  // console.log(digits);\n  return digits;\n};\n```\n\n\n\n#### [88] Merge Sorted Array\n\n> Given two sorted integer arrays *nums1* and *nums2*, merge *nums2* into *nums1* as one sorted array.\n>\n> **Note:**\n>\n> - The number of elements initialized in *nums1* and *nums2* are *m*and *n* respectively.\n> - You may assume that *nums1* has enough space (size that is **equal** to *m* + *n*) to hold additional elements from *nums2*.\n\n我用的方法比较死板, 感觉没有什么难度. 就是分情况讨论. \n\n不过用到了 js 里 Array 的特性.\n\n```javascript\nvar merge = function (nums1, m, nums2, n) {\n    // 说明没有自己的元素\n    if (m == 0) {\n        for (let i = 0; i < n; i++) {\n            nums1[i] = nums2[i];\n        }\n    } else {\n        let len = nums1.length;\n        let i = 0;\n        let j = m;\n        let k = 0;\n        while (i < len && k < n) {\n\n            if (nums2[k] >= nums1[i] && nums2[k] < nums1[i + 1]) {\n                nums1.splice(i + 1, 0, nums2[k]);\n                nums1.pop();\n                j++;\n                k++;\n            } else if (nums2[k] >= nums1[j - 1]) {\n                nums1[j] = nums2[k];\n                j++;\n                k++;\n            } else if (nums2[k] <= nums1[0]) {\n                nums1.unshift(nums2[k]);\n                nums1.pop();\n                j++;\n                k++;\n                i = 0;\n                continue;\n            }\n            i++;\n        }\n    }\n};\n```\n\n","source":"_posts/Two-Pointers.md","raw":"---\ntitle: Two Pointers\nabbrlink: b6a54014\ndate: 2020-07-30 10:03:54\ntags: [LeetCode, array, two-pointers]\ncategories: Algorithm\n---\n\n\n\n#### [11] Container With Most Water\n\n> Given *n* non-negative integers *a1*, *a2*, ..., *an* , where each represents a point at coordinate (*i*, *ai*). *n* vertical lines are drawn such that the two endpoints of line *i* is at (*i*, *ai*) and (*i*, 0). Find two lines, which together with x-axis forms a container, such that the container contains the most water.\n>\n> **Note:** You may not slant the container and *n* is at least 2.\n\n\n\n###### my solution : Brute Force\n\n穷举所有面积的可能性,最后对面积进行排序,找到最大值.\n\n中间一度尝试过将 `partArea` 组成数组先排序,也还是超时.\n\n```javascript\nvar maxArea = function (height) {\n  let partMaxSet = new Set();\n  for (let i = 0; i < height.length - 1; i++) {\n    for (let j = i + 1; j < height.length; j++) {\n      let yVal = height[j] < height[i] ? height[j] : height[i];\n      let partArea = (j - i) * yVal;\n      partMaxSet.add(partArea);\n    }\n  }\n  let partMaxList = Array.from(partMaxSet);\n  // 数字降序排列\n  partMaxList.sort(function (a, b) { return b - a });\n  return partMaxList[0];\n  // return Math.max.apply(null, partMaxList);\n};\n```\n\n\n\n###### Two pointers\n\n采用双指针做法, 对于 S(i, j) 来说, 都是每次向里移动一步.\n\n移动短板, 短板有可能变长, 面积有可能变大.\n\n但是移动长板,  短板只会不变或者变小, 因为盛水的体积取决于短板, 所以面积只会不变或变小.\n\n```js\n// 此算法需要证明\nvar maxArea = function (height) {\n  let i = 0, j = height.length - 1;\n  let areaList = new Array();\n  while (j - i > 0) {\n    if (height[i] < height[j]) {\n      // 计算面积以短边为准\n      areaList.push((j - i) * height[i]);\n      // 移动短边有可能获得更大面积\n      i++;\n    } else {\n      areaList.push((j - i) * height[j]);\n      j--;\n    }\n  }\n  // 将可能的面积列表倒序排列,返回第一个\n  return areaList.sort((a, b) => b - a)[0]\n}\n```\n\n**Complexity Analysis**\n\n- Time complexity : O(n)*O*(*n*). Single pass.\n- Space complexity : O(1)*O*(1). Constant space is used.\n\n\n\n#### [26] Remove Duplicates from Sorted Array\n\n> Given a sorted array *nums*, remove the duplicates [**in-place**](https://en.wikipedia.org/wiki/In-place_algorithm) such that each element appear only *once* and return the new length.\n>\n> Do not allocate extra space for another array, you must do this by **modifying the input array [in-place](https://en.wikipedia.org/wiki/In-place_algorithm)** with O(1) extra memory.\n\n\n\n###### my solution\n\n借用 js 数组splice方法\n\n```javascript\nvar removeDuplicates = function (nums) {\n  for (let i = 0; i < nums.length; i++) {\n    let j = i+1;\n    while (nums[j] == nums[i]) {\n      nums.splice(j, 1);\n    }\n  }\n};\n```\n\n\n\n###### Two pointers\n\n```javascript\n// 参考双指针的方法, 优化了解法\n// js的数组越界不会报错,只会得到 undefined 值\nvar removeDuplicates = function (nums) {\n  let i = 0;\n  for (let j = 0; j < nums.length; j++) {\n    if (nums[j] != nums[j + 1]) {\n      nums[i] = nums[j];\n      i++;\n    }\n  }\n  return i;\n};\n```\n\n\n\n#### [27] Remove Element\n\n> Given an array *nums* and a value *val*, remove all instances of that value [**in-place**](https://en.wikipedia.org/wiki/In-place_algorithm) and return the new length.\n>\n> Do not allocate extra space for another array, you must do this by **modifying the input array [in-place](https://en.wikipedia.org/wiki/In-place_algorithm)** with O(1) extra memory.\n>\n> The order of elements can be changed. It doesn't matter what you leave beyond the new length.\n\n\n\n###### my solution\n\n我自己的解法是利用了js数组操作的特性, 可以直接删除数组元素然后剩余元素位置前移的那种,比较方便,但是运行效果不咋地.\n\n```javascript\n// solution 1\nvar removeElement = function (nums, val) {\n  for (let i = 0; i < nums.length; i++) {\n    // 使用 while 保证对于同一个i, 去除该位置所有与val相等的值\n    // 不会遗漏由于删除数组元素而位置前移的新元素\n    while (nums[i] == val) {\n      nums.splice(i, 1)\n    }\n  }\n};\n```\n\n\n\n###### Two pointers\n\n下面的解法是参考了示例解法, 双指针解法. 我觉得很精巧.\n\n主要思路是, 将需要保留的元素都赋值给数组的前部分, 使用 i 标记赋值的位置.\n\n```javascript\n// solution two pointers\n// 只保留与val不同的元素\n// 赋值操作比起splice的删除操作 肯定速度更快 至于额外的空间 需要看splice的实现有没有占用了\nvar removeElement = function (nums, val) {\n  let i = 0;\n  for (let j = 0; j < nums.length; j++) {\n    if (nums[j] != val) {\n      nums[i] = nums[j];\n      // console.log(\"i=\", i, \" \", nums[i]);\n      i++;\n    }\n  }\n  return i;\n};\n```\n\n最差的情况应该是, 没有一个一样的, 但是遍历数组两遍而不是嵌套, 所以是 O(n).\n\n**Complexity analysis**\n\n- Time complexity : O(n). Assume the array has a total of n*n* elements, both *i* and *j* traverse at most 2*n* steps.\n- Space complexity : O(1).\n\n\n\n#### [15] 3Sum\n\n> Given an array `nums` of *n* integers, are there elements *a*, *b*, *c* in `nums` such that *a* + *b* + *c* = 0? Find all unique triplets in the array which gives the sum of zero.\n>\n> **Note:**\n>\n> The solution set must not contain duplicate triplets.\n\n数组排序后, 方便去除重复的元素 + 双指针移动不用嵌套且有方向可循.\n\n```javascript\n// solution 2 ：将数组排序后的双指针解法\nvar threeSum = function (nums) {\n  nums = nums.sort((a, b) => a - b); // 将数组正序排列\n  let len = nums.length;\n  let res = [];\n  for (let i = 0; i < len - 2; i++) {\n    // 第一个数大于 0，肯定加起来和不为0了\n    if (nums[i] > 0) {\n      break;\n    }\n    // 去掉重复元素\n    if (i > 0 && nums[i] == nums[i - 1])\n      continue;\n    let target = -nums[i];\n    let left = i + 1, right = len - 1;\n    while (left < right) {\n      if (nums[left] + nums[right] == target) {\n        res.push([nums[i], nums[left], nums[right]]);\n        left++;\n        right--;\n        // 这里是否判断 left < right 都没有那么重要, 因为最外面还会再判断一次\n        // 但是加上判断可能会少做一次计算\n        // 去掉重复元素\n        while (left < right && nums[left] == nums[left - 1]) {\n          left++;\n        }\n        while (left < right && nums[right] == nums[right + 1]) {\n          right--;\n        }\n      } else if (nums[left] + nums[right] < target) {\n        left++;\n      } else {\n        right--;\n      }\n    }\n  }\n  return res;\n};\n```\n\n\n\n#### [16] 3Sum Closest\n\n> Given an array `nums` of *n* integers and an integer `target`, find three integers in `nums` such that the sum is closest to `target`. Return the sum of the three integers. You may assume that each input would have exactly one solution.\n\n注意这里不是找相等, 而是保留最接近target的值, 实现方法类似.\n\n与target比较, 由于一直在找最接近的, 比target小就left++, 比target大就right--, 总之就是不断靠近target.\n\n```javascript\nvar threeSumClosest = function (nums, target) {\n  nums = nums.sort((a, b) => a - b);\n  let closest = nums[0] + nums[1] + nums[2];\n  let diff = Math.abs(closest - target);\n  let len = nums.length;\n  for (let i = 0; i < len - 2; i++) {\n    // 由于数组是排好序的\n    // 如果nums[i] * 3 > target, 则 nums[i]+nums[i+1]+nums[i+2] 是接下来遍历的最小值\n    // 后面差距只会越来越大\n    // 将接下来最小值与当前最小值closest分别与target比较, 返回与target差距较小的那个值\n    // 优化部分\n    if (nums[i] * 3 > target) {\n      let cDiff = Math.abs(closest - target);\n      let tempMin = nums[i] + nums[i + 1] + nums[i + 2];\n      let tDiff = Math.abs(tempMin - target);\n      return cDiff < tDiff ? closest : tempMin;\n    }\n    // 双指针 遍历数组剩余元素\n    let left = i + 1, right = len - 1;\n    while (left < right) {\n      let sum = nums[i] + nums[left] + nums[right];\n      let newDiff = Math.abs(sum - target);\n      if (newDiff == 0) {\n        return target\n      }\n      if (newDiff < diff) {\n        diff = newDiff;\n        closest = sum;\n      }\n      if (sum < target)\n        left++;\n      else\n        right--;\n    }\n  }\n  // console.log('closest:', closest);\n  return closest;\n};\n```\n\n\n\n#### [18] 4Sum\n\n> Given an array `nums` of *n* integers and an integer `target`, are there elements *a*, *b*, *c*, and *d*in `nums` such that *a* + *b* + *c* + *d* = `target`? Find all unique quadruplets in the array which gives the sum of `target`.\n>\n> **Note:**\n>\n> The solution set must not contain duplicate quadruplets.\n\n有了双指针, nSum都可解, 不过这个嵌套有点多,估计有更巧妙的解法.\n\n```javascript\nvar fourSum = function (nums, target) {\n  nums = nums.sort((a, b) => a - b);\n  let len = nums.length, res = [];\n  for (let i = 0; i < len - 3; i++) {\n    // 去重\n    if (nums[i] == nums[i - 1] && i > 0)\n      continue;\n\n    for (let j = i + 1; j < len - 2; j++) {\n\n      if (nums[j] == nums[j - 1] && j > i + 1)\n        continue;\n        \n      let t = target - nums[i] - nums[j];\n      let left = j + 1, right = len - 1;\n\n      while (left < right) {\n        let twoSum = nums[left] + nums[right];\n        if (twoSum == t) {\n          res.push([nums[i], nums[j], nums[left], nums[right]]);\n          left++;\n          right--;\n          // 去重\n          while (left < right && nums[left] == nums[left - 1])\n            left++;\n          while (left < right && nums[right] == nums[right + 1])\n            right--;\n        } else if (twoSum > t) {\n          right--;\n        } else {\n          left++;\n        }\n      }\n    }\n  }\n  // console.log(res);\n  return res;\n};\n```\n\n\n\n#### [283] Move Zeroes\n\n> Given an array `nums`, write a function to move all `0`'s to the end of it while maintaining the relative order of the non-zero elements.\n>\n> **Note**:\n>\n> 1. You must do this **in-place** without making a copy of the array.\n> 2. Minimize the total number of operations.\n\n\n\n双指针解法, 一次成功.\n\n```javascript\n// solution: two pointers\n// 借鉴之前的做题经验, 这题算是完成的比较快\nvar moveZeroes = function (nums) {\n  let len = nums.length, i = 0;\n  for (let j = 0; j < len; j++) {\n    if (nums[j] != 0) {\n      nums[i] = nums[j];\n      i++;\n    }\n  }\n  for (let t = i; t < len; t++) {\n    nums[t] = 0;\n  }\n  // console.log(nums);\n  return nums;\n};\n```\n\n\n\n#### [66] Plus One\n\n> Given a **non-empty** array of digits representing a non-negative integer, increment one to the integer.\n>\n> The digits are stored such that the most significant digit is at the head of the list, and each element in the array contains a single digit.\n>\n> You may assume the integer does not contain any leading zero, except the number 0 itself.\n\n\n\n主要是运用数组特性.不是很难, 理解题意即可.\n\n还挺多人不喜欢这道题的, 可能觉得太弱智了?...\n\n```javascript\nvar plusOne = function (digits) {\n  let len = digits.length;\n  // c 表示进位\n  let i = len - 1, c = 1;\n  while (i >= 0) {\n    // 没有向前进位, 就 +1 结束\n    if (digits[i] + c < 10) {\n      digits[i]++;\n      break;\n    } else if (i == 0) { \n      // 首位元素 +1 后有进位, 向数组头部插入 1 结束\n      digits[i] = 0;\n      digits.unshift(1);\n      break;\n    } else {\n      // 不是首位元素 +1 后有进位\n      // 当前元素设为 0 , 继续看更高位元素\n      digits[i] = 0;\n      i--;\n    }\n  }\n  // console.log(digits);\n  return digits;\n};\n```\n\n\n\n#### [88] Merge Sorted Array\n\n> Given two sorted integer arrays *nums1* and *nums2*, merge *nums2* into *nums1* as one sorted array.\n>\n> **Note:**\n>\n> - The number of elements initialized in *nums1* and *nums2* are *m*and *n* respectively.\n> - You may assume that *nums1* has enough space (size that is **equal** to *m* + *n*) to hold additional elements from *nums2*.\n\n我用的方法比较死板, 感觉没有什么难度. 就是分情况讨论. \n\n不过用到了 js 里 Array 的特性.\n\n```javascript\nvar merge = function (nums1, m, nums2, n) {\n    // 说明没有自己的元素\n    if (m == 0) {\n        for (let i = 0; i < n; i++) {\n            nums1[i] = nums2[i];\n        }\n    } else {\n        let len = nums1.length;\n        let i = 0;\n        let j = m;\n        let k = 0;\n        while (i < len && k < n) {\n\n            if (nums2[k] >= nums1[i] && nums2[k] < nums1[i + 1]) {\n                nums1.splice(i + 1, 0, nums2[k]);\n                nums1.pop();\n                j++;\n                k++;\n            } else if (nums2[k] >= nums1[j - 1]) {\n                nums1[j] = nums2[k];\n                j++;\n                k++;\n            } else if (nums2[k] <= nums1[0]) {\n                nums1.unshift(nums2[k]);\n                nums1.pop();\n                j++;\n                k++;\n                i = 0;\n                continue;\n            }\n            i++;\n        }\n    }\n};\n```\n\n","slug":"Two-Pointers","published":1,"updated":"2020-08-05T10:10:08.110Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckdyb5wbt000a5z9h6nxp0fn9","content":"<h4 id=\"11-Container-With-Most-Water\"><a href=\"#11-Container-With-Most-Water\" class=\"headerlink\" title=\"[11] Container With Most Water\"></a>[11] Container With Most Water</h4><blockquote>\n<p>Given <em>n</em> non-negative integers <em>a1</em>, <em>a2</em>, …, <em>an</em> , where each represents a point at coordinate (<em>i</em>, <em>ai</em>). <em>n</em> vertical lines are drawn such that the two endpoints of line <em>i</em> is at (<em>i</em>, <em>ai</em>) and (<em>i</em>, 0). Find two lines, which together with x-axis forms a container, such that the container contains the most water.</p>\n<p><strong>Note:</strong> You may not slant the container and <em>n</em> is at least 2.</p>\n</blockquote>\n<h6 id=\"my-solution-Brute-Force\"><a href=\"#my-solution-Brute-Force\" class=\"headerlink\" title=\"my solution : Brute Force\"></a>my solution : Brute Force</h6><p>穷举所有面积的可能性,最后对面积进行排序,找到最大值.</p>\n<p>中间一度尝试过将 <code>partArea</code> 组成数组先排序,也还是超时.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> maxArea = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">height</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> partMaxSet = <span class=\"keyword\">new</span> <span class=\"built_in\">Set</span>();</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; height.length - <span class=\"number\">1</span>; i++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> j = i + <span class=\"number\">1</span>; j &lt; height.length; j++) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">let</span> yVal = height[j] &lt; height[i] ? height[j] : height[i];</span><br><span class=\"line\">      <span class=\"keyword\">let</span> partArea = (j - i) * yVal;</span><br><span class=\"line\">      partMaxSet.add(partArea);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> partMaxList = <span class=\"built_in\">Array</span>.from(partMaxSet);</span><br><span class=\"line\">  <span class=\"comment\">// 数字降序排列</span></span><br><span class=\"line\">  partMaxList.sort(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">a, b</span>) </span>&#123; <span class=\"keyword\">return</span> b - a &#125;);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> partMaxList[<span class=\"number\">0</span>];</span><br><span class=\"line\">  <span class=\"comment\">// return Math.max.apply(null, partMaxList);</span></span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n\n\n<h6 id=\"Two-pointers\"><a href=\"#Two-pointers\" class=\"headerlink\" title=\"Two pointers\"></a>Two pointers</h6><p>采用双指针做法, 对于 S(i, j) 来说, 都是每次向里移动一步.</p>\n<p>移动短板, 短板有可能变长, 面积有可能变大.</p>\n<p>但是移动长板,  短板只会不变或者变小, 因为盛水的体积取决于短板, 所以面积只会不变或变小.</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 此算法需要证明</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> maxArea = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">height</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> i = <span class=\"number\">0</span>, j = height.length - <span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> areaList = <span class=\"keyword\">new</span> <span class=\"built_in\">Array</span>();</span><br><span class=\"line\">  <span class=\"keyword\">while</span> (j - i &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (height[i] &lt; height[j]) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 计算面积以短边为准</span></span><br><span class=\"line\">      areaList.push((j - i) * height[i]);</span><br><span class=\"line\">      <span class=\"comment\">// 移动短边有可能获得更大面积</span></span><br><span class=\"line\">      i++;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      areaList.push((j - i) * height[j]);</span><br><span class=\"line\">      j--;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// 将可能的面积列表倒序排列,返回第一个</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> areaList.sort(<span class=\"function\">(<span class=\"params\">a, b</span>) =&gt;</span> b - a)[<span class=\"number\">0</span>]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>Complexity Analysis</strong></p>\n<ul>\n<li>Time complexity : O(n)<em>O</em>(<em>n</em>). Single pass.</li>\n<li>Space complexity : O(1)<em>O</em>(1). Constant space is used.</li>\n</ul>\n<h4 id=\"26-Remove-Duplicates-from-Sorted-Array\"><a href=\"#26-Remove-Duplicates-from-Sorted-Array\" class=\"headerlink\" title=\"[26] Remove Duplicates from Sorted Array\"></a>[26] Remove Duplicates from Sorted Array</h4><blockquote>\n<p>Given a sorted array <em>nums</em>, remove the duplicates <a href=\"https://en.wikipedia.org/wiki/In-place_algorithm\" target=\"_blank\" rel=\"noopener\"><strong>in-place</strong></a> such that each element appear only <em>once</em> and return the new length.</p>\n<p>Do not allocate extra space for another array, you must do this by <strong>modifying the input array <a href=\"https://en.wikipedia.org/wiki/In-place_algorithm\" target=\"_blank\" rel=\"noopener\">in-place</a></strong> with O(1) extra memory.</p>\n</blockquote>\n<h6 id=\"my-solution\"><a href=\"#my-solution\" class=\"headerlink\" title=\"my solution\"></a>my solution</h6><p>借用 js 数组splice方法</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> removeDuplicates = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">nums</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; nums.length; i++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> j = i+<span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (nums[j] == nums[i]) &#123;</span><br><span class=\"line\">      nums.splice(j, <span class=\"number\">1</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n\n\n<h6 id=\"Two-pointers-1\"><a href=\"#Two-pointers-1\" class=\"headerlink\" title=\"Two pointers\"></a>Two pointers</h6><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 参考双指针的方法, 优化了解法</span></span><br><span class=\"line\"><span class=\"comment\">// js的数组越界不会报错,只会得到 undefined 值</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> removeDuplicates = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">nums</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> i = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> j = <span class=\"number\">0</span>; j &lt; nums.length; j++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (nums[j] != nums[j + <span class=\"number\">1</span>]) &#123;</span><br><span class=\"line\">      nums[i] = nums[j];</span><br><span class=\"line\">      i++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> i;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"27-Remove-Element\"><a href=\"#27-Remove-Element\" class=\"headerlink\" title=\"[27] Remove Element\"></a>[27] Remove Element</h4><blockquote>\n<p>Given an array <em>nums</em> and a value <em>val</em>, remove all instances of that value <a href=\"https://en.wikipedia.org/wiki/In-place_algorithm\" target=\"_blank\" rel=\"noopener\"><strong>in-place</strong></a> and return the new length.</p>\n<p>Do not allocate extra space for another array, you must do this by <strong>modifying the input array <a href=\"https://en.wikipedia.org/wiki/In-place_algorithm\" target=\"_blank\" rel=\"noopener\">in-place</a></strong> with O(1) extra memory.</p>\n<p>The order of elements can be changed. It doesn’t matter what you leave beyond the new length.</p>\n</blockquote>\n<h6 id=\"my-solution-1\"><a href=\"#my-solution-1\" class=\"headerlink\" title=\"my solution\"></a>my solution</h6><p>我自己的解法是利用了js数组操作的特性, 可以直接删除数组元素然后剩余元素位置前移的那种,比较方便,但是运行效果不咋地.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// solution 1</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> removeElement = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">nums, val</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; nums.length; i++) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 使用 while 保证对于同一个i, 去除该位置所有与val相等的值</span></span><br><span class=\"line\">    <span class=\"comment\">// 不会遗漏由于删除数组元素而位置前移的新元素</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (nums[i] == val) &#123;</span><br><span class=\"line\">      nums.splice(i, <span class=\"number\">1</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n\n\n<h6 id=\"Two-pointers-2\"><a href=\"#Two-pointers-2\" class=\"headerlink\" title=\"Two pointers\"></a>Two pointers</h6><p>下面的解法是参考了示例解法, 双指针解法. 我觉得很精巧.</p>\n<p>主要思路是, 将需要保留的元素都赋值给数组的前部分, 使用 i 标记赋值的位置.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// solution two pointers</span></span><br><span class=\"line\"><span class=\"comment\">// 只保留与val不同的元素</span></span><br><span class=\"line\"><span class=\"comment\">// 赋值操作比起splice的删除操作 肯定速度更快 至于额外的空间 需要看splice的实现有没有占用了</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> removeElement = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">nums, val</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> i = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> j = <span class=\"number\">0</span>; j &lt; nums.length; j++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (nums[j] != val) &#123;</span><br><span class=\"line\">      nums[i] = nums[j];</span><br><span class=\"line\">      <span class=\"comment\">// console.log(\"i=\", i, \" \", nums[i]);</span></span><br><span class=\"line\">      i++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> i;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>最差的情况应该是, 没有一个一样的, 但是遍历数组两遍而不是嵌套, 所以是 O(n).</p>\n<p><strong>Complexity analysis</strong></p>\n<ul>\n<li>Time complexity : O(n). Assume the array has a total of n<em>n</em> elements, both <em>i</em> and <em>j</em> traverse at most 2<em>n</em> steps.</li>\n<li>Space complexity : O(1).</li>\n</ul>\n<h4 id=\"15-3Sum\"><a href=\"#15-3Sum\" class=\"headerlink\" title=\"[15] 3Sum\"></a>[15] 3Sum</h4><blockquote>\n<p>Given an array <code>nums</code> of <em>n</em> integers, are there elements <em>a</em>, <em>b</em>, <em>c</em> in <code>nums</code> such that <em>a</em> + <em>b</em> + <em>c</em> = 0? Find all unique triplets in the array which gives the sum of zero.</p>\n<p><strong>Note:</strong></p>\n<p>The solution set must not contain duplicate triplets.</p>\n</blockquote>\n<p>数组排序后, 方便去除重复的元素 + 双指针移动不用嵌套且有方向可循.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// solution 2 ：将数组排序后的双指针解法</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> threeSum = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">nums</span>) </span>&#123;</span><br><span class=\"line\">  nums = nums.sort(<span class=\"function\">(<span class=\"params\">a, b</span>) =&gt;</span> a - b); <span class=\"comment\">// 将数组正序排列</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> len = nums.length;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> res = [];</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; len - <span class=\"number\">2</span>; i++) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 第一个数大于 0，肯定加起来和不为0了</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (nums[i] &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 去掉重复元素</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (i &gt; <span class=\"number\">0</span> &amp;&amp; nums[i] == nums[i - <span class=\"number\">1</span>])</span><br><span class=\"line\">      <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> target = -nums[i];</span><br><span class=\"line\">    <span class=\"keyword\">let</span> left = i + <span class=\"number\">1</span>, right = len - <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (left &lt; right) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (nums[left] + nums[right] == target) &#123;</span><br><span class=\"line\">        res.push([nums[i], nums[left], nums[right]]);</span><br><span class=\"line\">        left++;</span><br><span class=\"line\">        right--;</span><br><span class=\"line\">        <span class=\"comment\">// 这里是否判断 left &lt; right 都没有那么重要, 因为最外面还会再判断一次</span></span><br><span class=\"line\">        <span class=\"comment\">// 但是加上判断可能会少做一次计算</span></span><br><span class=\"line\">        <span class=\"comment\">// 去掉重复元素</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span> (left &lt; right &amp;&amp; nums[left] == nums[left - <span class=\"number\">1</span>]) &#123;</span><br><span class=\"line\">          left++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (left &lt; right &amp;&amp; nums[right] == nums[right + <span class=\"number\">1</span>]) &#123;</span><br><span class=\"line\">          right--;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (nums[left] + nums[right] &lt; target) &#123;</span><br><span class=\"line\">        left++;</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        right--;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"16-3Sum-Closest\"><a href=\"#16-3Sum-Closest\" class=\"headerlink\" title=\"[16] 3Sum Closest\"></a>[16] 3Sum Closest</h4><blockquote>\n<p>Given an array <code>nums</code> of <em>n</em> integers and an integer <code>target</code>, find three integers in <code>nums</code> such that the sum is closest to <code>target</code>. Return the sum of the three integers. You may assume that each input would have exactly one solution.</p>\n</blockquote>\n<p>注意这里不是找相等, 而是保留最接近target的值, 实现方法类似.</p>\n<p>与target比较, 由于一直在找最接近的, 比target小就left++, 比target大就right–, 总之就是不断靠近target.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> threeSumClosest = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">nums, target</span>) </span>&#123;</span><br><span class=\"line\">  nums = nums.sort(<span class=\"function\">(<span class=\"params\">a, b</span>) =&gt;</span> a - b);</span><br><span class=\"line\">  <span class=\"keyword\">let</span> closest = nums[<span class=\"number\">0</span>] + nums[<span class=\"number\">1</span>] + nums[<span class=\"number\">2</span>];</span><br><span class=\"line\">  <span class=\"keyword\">let</span> diff = <span class=\"built_in\">Math</span>.abs(closest - target);</span><br><span class=\"line\">  <span class=\"keyword\">let</span> len = nums.length;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; len - <span class=\"number\">2</span>; i++) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 由于数组是排好序的</span></span><br><span class=\"line\">    <span class=\"comment\">// 如果nums[i] * 3 &gt; target, 则 nums[i]+nums[i+1]+nums[i+2] 是接下来遍历的最小值</span></span><br><span class=\"line\">    <span class=\"comment\">// 后面差距只会越来越大</span></span><br><span class=\"line\">    <span class=\"comment\">// 将接下来最小值与当前最小值closest分别与target比较, 返回与target差距较小的那个值</span></span><br><span class=\"line\">    <span class=\"comment\">// 优化部分</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (nums[i] * <span class=\"number\">3</span> &gt; target) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">let</span> cDiff = <span class=\"built_in\">Math</span>.abs(closest - target);</span><br><span class=\"line\">      <span class=\"keyword\">let</span> tempMin = nums[i] + nums[i + <span class=\"number\">1</span>] + nums[i + <span class=\"number\">2</span>];</span><br><span class=\"line\">      <span class=\"keyword\">let</span> tDiff = <span class=\"built_in\">Math</span>.abs(tempMin - target);</span><br><span class=\"line\">      <span class=\"keyword\">return</span> cDiff &lt; tDiff ? closest : tempMin;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 双指针 遍历数组剩余元素</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> left = i + <span class=\"number\">1</span>, right = len - <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (left &lt; right) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">let</span> sum = nums[i] + nums[left] + nums[right];</span><br><span class=\"line\">      <span class=\"keyword\">let</span> newDiff = <span class=\"built_in\">Math</span>.abs(sum - target);</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (newDiff == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> target</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (newDiff &lt; diff) &#123;</span><br><span class=\"line\">        diff = newDiff;</span><br><span class=\"line\">        closest = sum;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (sum &lt; target)</span><br><span class=\"line\">        left++;</span><br><span class=\"line\">      <span class=\"keyword\">else</span></span><br><span class=\"line\">        right--;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// console.log('closest:', closest);</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> closest;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"18-4Sum\"><a href=\"#18-4Sum\" class=\"headerlink\" title=\"[18] 4Sum\"></a>[18] 4Sum</h4><blockquote>\n<p>Given an array <code>nums</code> of <em>n</em> integers and an integer <code>target</code>, are there elements <em>a</em>, <em>b</em>, <em>c</em>, and <em>d</em>in <code>nums</code> such that <em>a</em> + <em>b</em> + <em>c</em> + <em>d</em> = <code>target</code>? Find all unique quadruplets in the array which gives the sum of <code>target</code>.</p>\n<p><strong>Note:</strong></p>\n<p>The solution set must not contain duplicate quadruplets.</p>\n</blockquote>\n<p>有了双指针, nSum都可解, 不过这个嵌套有点多,估计有更巧妙的解法.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> fourSum = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">nums, target</span>) </span>&#123;</span><br><span class=\"line\">  nums = nums.sort(<span class=\"function\">(<span class=\"params\">a, b</span>) =&gt;</span> a - b);</span><br><span class=\"line\">  <span class=\"keyword\">let</span> len = nums.length, res = [];</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; len - <span class=\"number\">3</span>; i++) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 去重</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (nums[i] == nums[i - <span class=\"number\">1</span>] &amp;&amp; i &gt; <span class=\"number\">0</span>)</span><br><span class=\"line\">      <span class=\"keyword\">continue</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> j = i + <span class=\"number\">1</span>; j &lt; len - <span class=\"number\">2</span>; j++) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (nums[j] == nums[j - <span class=\"number\">1</span>] &amp;&amp; j &gt; i + <span class=\"number\">1</span>)</span><br><span class=\"line\">        <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">        </span><br><span class=\"line\">      <span class=\"keyword\">let</span> t = target - nums[i] - nums[j];</span><br><span class=\"line\">      <span class=\"keyword\">let</span> left = j + <span class=\"number\">1</span>, right = len - <span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">while</span> (left &lt; right) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> twoSum = nums[left] + nums[right];</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (twoSum == t) &#123;</span><br><span class=\"line\">          res.push([nums[i], nums[j], nums[left], nums[right]]);</span><br><span class=\"line\">          left++;</span><br><span class=\"line\">          right--;</span><br><span class=\"line\">          <span class=\"comment\">// 去重</span></span><br><span class=\"line\">          <span class=\"keyword\">while</span> (left &lt; right &amp;&amp; nums[left] == nums[left - <span class=\"number\">1</span>])</span><br><span class=\"line\">            left++;</span><br><span class=\"line\">          <span class=\"keyword\">while</span> (left &lt; right &amp;&amp; nums[right] == nums[right + <span class=\"number\">1</span>])</span><br><span class=\"line\">            right--;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (twoSum &gt; t) &#123;</span><br><span class=\"line\">          right--;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">          left++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// console.log(res);</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"283-Move-Zeroes\"><a href=\"#283-Move-Zeroes\" class=\"headerlink\" title=\"[283] Move Zeroes\"></a>[283] Move Zeroes</h4><blockquote>\n<p>Given an array <code>nums</code>, write a function to move all <code>0</code>‘s to the end of it while maintaining the relative order of the non-zero elements.</p>\n<p><strong>Note</strong>:</p>\n<ol>\n<li>You must do this <strong>in-place</strong> without making a copy of the array.</li>\n<li>Minimize the total number of operations.</li>\n</ol>\n</blockquote>\n<p>双指针解法, 一次成功.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// solution: two pointers</span></span><br><span class=\"line\"><span class=\"comment\">// 借鉴之前的做题经验, 这题算是完成的比较快</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> moveZeroes = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">nums</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> len = nums.length, i = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> j = <span class=\"number\">0</span>; j &lt; len; j++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (nums[j] != <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">      nums[i] = nums[j];</span><br><span class=\"line\">      i++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> t = i; t &lt; len; t++) &#123;</span><br><span class=\"line\">    nums[t] = <span class=\"number\">0</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// console.log(nums);</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> nums;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"66-Plus-One\"><a href=\"#66-Plus-One\" class=\"headerlink\" title=\"[66] Plus One\"></a>[66] Plus One</h4><blockquote>\n<p>Given a <strong>non-empty</strong> array of digits representing a non-negative integer, increment one to the integer.</p>\n<p>The digits are stored such that the most significant digit is at the head of the list, and each element in the array contains a single digit.</p>\n<p>You may assume the integer does not contain any leading zero, except the number 0 itself.</p>\n</blockquote>\n<p>主要是运用数组特性.不是很难, 理解题意即可.</p>\n<p>还挺多人不喜欢这道题的, 可能觉得太弱智了?…</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> plusOne = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">digits</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> len = digits.length;</span><br><span class=\"line\">  <span class=\"comment\">// c 表示进位</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> i = len - <span class=\"number\">1</span>, c = <span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"keyword\">while</span> (i &gt;= <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 没有向前进位, 就 +1 结束</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (digits[i] + c &lt; <span class=\"number\">10</span>) &#123;</span><br><span class=\"line\">      digits[i]++;</span><br><span class=\"line\">      <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (i == <span class=\"number\">0</span>) &#123; </span><br><span class=\"line\">      <span class=\"comment\">// 首位元素 +1 后有进位, 向数组头部插入 1 结束</span></span><br><span class=\"line\">      digits[i] = <span class=\"number\">0</span>;</span><br><span class=\"line\">      digits.unshift(<span class=\"number\">1</span>);</span><br><span class=\"line\">      <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 不是首位元素 +1 后有进位</span></span><br><span class=\"line\">      <span class=\"comment\">// 当前元素设为 0 , 继续看更高位元素</span></span><br><span class=\"line\">      digits[i] = <span class=\"number\">0</span>;</span><br><span class=\"line\">      i--;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// console.log(digits);</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> digits;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"88-Merge-Sorted-Array\"><a href=\"#88-Merge-Sorted-Array\" class=\"headerlink\" title=\"[88] Merge Sorted Array\"></a>[88] Merge Sorted Array</h4><blockquote>\n<p>Given two sorted integer arrays <em>nums1</em> and <em>nums2</em>, merge <em>nums2</em> into <em>nums1</em> as one sorted array.</p>\n<p><strong>Note:</strong></p>\n<ul>\n<li>The number of elements initialized in <em>nums1</em> and <em>nums2</em> are <em>m</em>and <em>n</em> respectively.</li>\n<li>You may assume that <em>nums1</em> has enough space (size that is <strong>equal</strong> to <em>m</em> + <em>n</em>) to hold additional elements from <em>nums2</em>.</li>\n</ul>\n</blockquote>\n<p>我用的方法比较死板, 感觉没有什么难度. 就是分情况讨论. </p>\n<p>不过用到了 js 里 Array 的特性.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> merge = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">nums1, m, nums2, n</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 说明没有自己的元素</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (m == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; n; i++) &#123;</span><br><span class=\"line\">            nums1[i] = nums2[i];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> len = nums1.length;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> i = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> j = m;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> k = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (i &lt; len &amp;&amp; k &lt; n) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (nums2[k] &gt;= nums1[i] &amp;&amp; nums2[k] &lt; nums1[i + <span class=\"number\">1</span>]) &#123;</span><br><span class=\"line\">                nums1.splice(i + <span class=\"number\">1</span>, <span class=\"number\">0</span>, nums2[k]);</span><br><span class=\"line\">                nums1.pop();</span><br><span class=\"line\">                j++;</span><br><span class=\"line\">                k++;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (nums2[k] &gt;= nums1[j - <span class=\"number\">1</span>]) &#123;</span><br><span class=\"line\">                nums1[j] = nums2[k];</span><br><span class=\"line\">                j++;</span><br><span class=\"line\">                k++;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (nums2[k] &lt;= nums1[<span class=\"number\">0</span>]) &#123;</span><br><span class=\"line\">                nums1.unshift(nums2[k]);</span><br><span class=\"line\">                nums1.pop();</span><br><span class=\"line\">                j++;</span><br><span class=\"line\">                k++;</span><br><span class=\"line\">                i = <span class=\"number\">0</span>;</span><br><span class=\"line\">                <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            i++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"","more":"<h4 id=\"11-Container-With-Most-Water\"><a href=\"#11-Container-With-Most-Water\" class=\"headerlink\" title=\"[11] Container With Most Water\"></a>[11] Container With Most Water</h4><blockquote>\n<p>Given <em>n</em> non-negative integers <em>a1</em>, <em>a2</em>, …, <em>an</em> , where each represents a point at coordinate (<em>i</em>, <em>ai</em>). <em>n</em> vertical lines are drawn such that the two endpoints of line <em>i</em> is at (<em>i</em>, <em>ai</em>) and (<em>i</em>, 0). Find two lines, which together with x-axis forms a container, such that the container contains the most water.</p>\n<p><strong>Note:</strong> You may not slant the container and <em>n</em> is at least 2.</p>\n</blockquote>\n<h6 id=\"my-solution-Brute-Force\"><a href=\"#my-solution-Brute-Force\" class=\"headerlink\" title=\"my solution : Brute Force\"></a>my solution : Brute Force</h6><p>穷举所有面积的可能性,最后对面积进行排序,找到最大值.</p>\n<p>中间一度尝试过将 <code>partArea</code> 组成数组先排序,也还是超时.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> maxArea = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">height</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> partMaxSet = <span class=\"keyword\">new</span> <span class=\"built_in\">Set</span>();</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; height.length - <span class=\"number\">1</span>; i++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> j = i + <span class=\"number\">1</span>; j &lt; height.length; j++) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">let</span> yVal = height[j] &lt; height[i] ? height[j] : height[i];</span><br><span class=\"line\">      <span class=\"keyword\">let</span> partArea = (j - i) * yVal;</span><br><span class=\"line\">      partMaxSet.add(partArea);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> partMaxList = <span class=\"built_in\">Array</span>.from(partMaxSet);</span><br><span class=\"line\">  <span class=\"comment\">// 数字降序排列</span></span><br><span class=\"line\">  partMaxList.sort(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">a, b</span>) </span>&#123; <span class=\"keyword\">return</span> b - a &#125;);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> partMaxList[<span class=\"number\">0</span>];</span><br><span class=\"line\">  <span class=\"comment\">// return Math.max.apply(null, partMaxList);</span></span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n\n\n<h6 id=\"Two-pointers\"><a href=\"#Two-pointers\" class=\"headerlink\" title=\"Two pointers\"></a>Two pointers</h6><p>采用双指针做法, 对于 S(i, j) 来说, 都是每次向里移动一步.</p>\n<p>移动短板, 短板有可能变长, 面积有可能变大.</p>\n<p>但是移动长板,  短板只会不变或者变小, 因为盛水的体积取决于短板, 所以面积只会不变或变小.</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 此算法需要证明</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> maxArea = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">height</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> i = <span class=\"number\">0</span>, j = height.length - <span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> areaList = <span class=\"keyword\">new</span> <span class=\"built_in\">Array</span>();</span><br><span class=\"line\">  <span class=\"keyword\">while</span> (j - i &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (height[i] &lt; height[j]) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 计算面积以短边为准</span></span><br><span class=\"line\">      areaList.push((j - i) * height[i]);</span><br><span class=\"line\">      <span class=\"comment\">// 移动短边有可能获得更大面积</span></span><br><span class=\"line\">      i++;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      areaList.push((j - i) * height[j]);</span><br><span class=\"line\">      j--;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// 将可能的面积列表倒序排列,返回第一个</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> areaList.sort(<span class=\"function\">(<span class=\"params\">a, b</span>) =&gt;</span> b - a)[<span class=\"number\">0</span>]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>Complexity Analysis</strong></p>\n<ul>\n<li>Time complexity : O(n)<em>O</em>(<em>n</em>). Single pass.</li>\n<li>Space complexity : O(1)<em>O</em>(1). Constant space is used.</li>\n</ul>\n<h4 id=\"26-Remove-Duplicates-from-Sorted-Array\"><a href=\"#26-Remove-Duplicates-from-Sorted-Array\" class=\"headerlink\" title=\"[26] Remove Duplicates from Sorted Array\"></a>[26] Remove Duplicates from Sorted Array</h4><blockquote>\n<p>Given a sorted array <em>nums</em>, remove the duplicates <a href=\"https://en.wikipedia.org/wiki/In-place_algorithm\" target=\"_blank\" rel=\"noopener\"><strong>in-place</strong></a> such that each element appear only <em>once</em> and return the new length.</p>\n<p>Do not allocate extra space for another array, you must do this by <strong>modifying the input array <a href=\"https://en.wikipedia.org/wiki/In-place_algorithm\" target=\"_blank\" rel=\"noopener\">in-place</a></strong> with O(1) extra memory.</p>\n</blockquote>\n<h6 id=\"my-solution\"><a href=\"#my-solution\" class=\"headerlink\" title=\"my solution\"></a>my solution</h6><p>借用 js 数组splice方法</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> removeDuplicates = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">nums</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; nums.length; i++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> j = i+<span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (nums[j] == nums[i]) &#123;</span><br><span class=\"line\">      nums.splice(j, <span class=\"number\">1</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n\n\n<h6 id=\"Two-pointers-1\"><a href=\"#Two-pointers-1\" class=\"headerlink\" title=\"Two pointers\"></a>Two pointers</h6><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 参考双指针的方法, 优化了解法</span></span><br><span class=\"line\"><span class=\"comment\">// js的数组越界不会报错,只会得到 undefined 值</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> removeDuplicates = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">nums</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> i = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> j = <span class=\"number\">0</span>; j &lt; nums.length; j++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (nums[j] != nums[j + <span class=\"number\">1</span>]) &#123;</span><br><span class=\"line\">      nums[i] = nums[j];</span><br><span class=\"line\">      i++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> i;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"27-Remove-Element\"><a href=\"#27-Remove-Element\" class=\"headerlink\" title=\"[27] Remove Element\"></a>[27] Remove Element</h4><blockquote>\n<p>Given an array <em>nums</em> and a value <em>val</em>, remove all instances of that value <a href=\"https://en.wikipedia.org/wiki/In-place_algorithm\" target=\"_blank\" rel=\"noopener\"><strong>in-place</strong></a> and return the new length.</p>\n<p>Do not allocate extra space for another array, you must do this by <strong>modifying the input array <a href=\"https://en.wikipedia.org/wiki/In-place_algorithm\" target=\"_blank\" rel=\"noopener\">in-place</a></strong> with O(1) extra memory.</p>\n<p>The order of elements can be changed. It doesn’t matter what you leave beyond the new length.</p>\n</blockquote>\n<h6 id=\"my-solution-1\"><a href=\"#my-solution-1\" class=\"headerlink\" title=\"my solution\"></a>my solution</h6><p>我自己的解法是利用了js数组操作的特性, 可以直接删除数组元素然后剩余元素位置前移的那种,比较方便,但是运行效果不咋地.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// solution 1</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> removeElement = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">nums, val</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; nums.length; i++) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 使用 while 保证对于同一个i, 去除该位置所有与val相等的值</span></span><br><span class=\"line\">    <span class=\"comment\">// 不会遗漏由于删除数组元素而位置前移的新元素</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (nums[i] == val) &#123;</span><br><span class=\"line\">      nums.splice(i, <span class=\"number\">1</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n\n\n<h6 id=\"Two-pointers-2\"><a href=\"#Two-pointers-2\" class=\"headerlink\" title=\"Two pointers\"></a>Two pointers</h6><p>下面的解法是参考了示例解法, 双指针解法. 我觉得很精巧.</p>\n<p>主要思路是, 将需要保留的元素都赋值给数组的前部分, 使用 i 标记赋值的位置.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// solution two pointers</span></span><br><span class=\"line\"><span class=\"comment\">// 只保留与val不同的元素</span></span><br><span class=\"line\"><span class=\"comment\">// 赋值操作比起splice的删除操作 肯定速度更快 至于额外的空间 需要看splice的实现有没有占用了</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> removeElement = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">nums, val</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> i = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> j = <span class=\"number\">0</span>; j &lt; nums.length; j++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (nums[j] != val) &#123;</span><br><span class=\"line\">      nums[i] = nums[j];</span><br><span class=\"line\">      <span class=\"comment\">// console.log(\"i=\", i, \" \", nums[i]);</span></span><br><span class=\"line\">      i++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> i;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>最差的情况应该是, 没有一个一样的, 但是遍历数组两遍而不是嵌套, 所以是 O(n).</p>\n<p><strong>Complexity analysis</strong></p>\n<ul>\n<li>Time complexity : O(n). Assume the array has a total of n<em>n</em> elements, both <em>i</em> and <em>j</em> traverse at most 2<em>n</em> steps.</li>\n<li>Space complexity : O(1).</li>\n</ul>\n<h4 id=\"15-3Sum\"><a href=\"#15-3Sum\" class=\"headerlink\" title=\"[15] 3Sum\"></a>[15] 3Sum</h4><blockquote>\n<p>Given an array <code>nums</code> of <em>n</em> integers, are there elements <em>a</em>, <em>b</em>, <em>c</em> in <code>nums</code> such that <em>a</em> + <em>b</em> + <em>c</em> = 0? Find all unique triplets in the array which gives the sum of zero.</p>\n<p><strong>Note:</strong></p>\n<p>The solution set must not contain duplicate triplets.</p>\n</blockquote>\n<p>数组排序后, 方便去除重复的元素 + 双指针移动不用嵌套且有方向可循.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// solution 2 ：将数组排序后的双指针解法</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> threeSum = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">nums</span>) </span>&#123;</span><br><span class=\"line\">  nums = nums.sort(<span class=\"function\">(<span class=\"params\">a, b</span>) =&gt;</span> a - b); <span class=\"comment\">// 将数组正序排列</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> len = nums.length;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> res = [];</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; len - <span class=\"number\">2</span>; i++) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 第一个数大于 0，肯定加起来和不为0了</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (nums[i] &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 去掉重复元素</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (i &gt; <span class=\"number\">0</span> &amp;&amp; nums[i] == nums[i - <span class=\"number\">1</span>])</span><br><span class=\"line\">      <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> target = -nums[i];</span><br><span class=\"line\">    <span class=\"keyword\">let</span> left = i + <span class=\"number\">1</span>, right = len - <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (left &lt; right) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (nums[left] + nums[right] == target) &#123;</span><br><span class=\"line\">        res.push([nums[i], nums[left], nums[right]]);</span><br><span class=\"line\">        left++;</span><br><span class=\"line\">        right--;</span><br><span class=\"line\">        <span class=\"comment\">// 这里是否判断 left &lt; right 都没有那么重要, 因为最外面还会再判断一次</span></span><br><span class=\"line\">        <span class=\"comment\">// 但是加上判断可能会少做一次计算</span></span><br><span class=\"line\">        <span class=\"comment\">// 去掉重复元素</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span> (left &lt; right &amp;&amp; nums[left] == nums[left - <span class=\"number\">1</span>]) &#123;</span><br><span class=\"line\">          left++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (left &lt; right &amp;&amp; nums[right] == nums[right + <span class=\"number\">1</span>]) &#123;</span><br><span class=\"line\">          right--;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (nums[left] + nums[right] &lt; target) &#123;</span><br><span class=\"line\">        left++;</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        right--;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"16-3Sum-Closest\"><a href=\"#16-3Sum-Closest\" class=\"headerlink\" title=\"[16] 3Sum Closest\"></a>[16] 3Sum Closest</h4><blockquote>\n<p>Given an array <code>nums</code> of <em>n</em> integers and an integer <code>target</code>, find three integers in <code>nums</code> such that the sum is closest to <code>target</code>. Return the sum of the three integers. You may assume that each input would have exactly one solution.</p>\n</blockquote>\n<p>注意这里不是找相等, 而是保留最接近target的值, 实现方法类似.</p>\n<p>与target比较, 由于一直在找最接近的, 比target小就left++, 比target大就right–, 总之就是不断靠近target.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> threeSumClosest = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">nums, target</span>) </span>&#123;</span><br><span class=\"line\">  nums = nums.sort(<span class=\"function\">(<span class=\"params\">a, b</span>) =&gt;</span> a - b);</span><br><span class=\"line\">  <span class=\"keyword\">let</span> closest = nums[<span class=\"number\">0</span>] + nums[<span class=\"number\">1</span>] + nums[<span class=\"number\">2</span>];</span><br><span class=\"line\">  <span class=\"keyword\">let</span> diff = <span class=\"built_in\">Math</span>.abs(closest - target);</span><br><span class=\"line\">  <span class=\"keyword\">let</span> len = nums.length;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; len - <span class=\"number\">2</span>; i++) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 由于数组是排好序的</span></span><br><span class=\"line\">    <span class=\"comment\">// 如果nums[i] * 3 &gt; target, 则 nums[i]+nums[i+1]+nums[i+2] 是接下来遍历的最小值</span></span><br><span class=\"line\">    <span class=\"comment\">// 后面差距只会越来越大</span></span><br><span class=\"line\">    <span class=\"comment\">// 将接下来最小值与当前最小值closest分别与target比较, 返回与target差距较小的那个值</span></span><br><span class=\"line\">    <span class=\"comment\">// 优化部分</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (nums[i] * <span class=\"number\">3</span> &gt; target) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">let</span> cDiff = <span class=\"built_in\">Math</span>.abs(closest - target);</span><br><span class=\"line\">      <span class=\"keyword\">let</span> tempMin = nums[i] + nums[i + <span class=\"number\">1</span>] + nums[i + <span class=\"number\">2</span>];</span><br><span class=\"line\">      <span class=\"keyword\">let</span> tDiff = <span class=\"built_in\">Math</span>.abs(tempMin - target);</span><br><span class=\"line\">      <span class=\"keyword\">return</span> cDiff &lt; tDiff ? closest : tempMin;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 双指针 遍历数组剩余元素</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> left = i + <span class=\"number\">1</span>, right = len - <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (left &lt; right) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">let</span> sum = nums[i] + nums[left] + nums[right];</span><br><span class=\"line\">      <span class=\"keyword\">let</span> newDiff = <span class=\"built_in\">Math</span>.abs(sum - target);</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (newDiff == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> target</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (newDiff &lt; diff) &#123;</span><br><span class=\"line\">        diff = newDiff;</span><br><span class=\"line\">        closest = sum;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (sum &lt; target)</span><br><span class=\"line\">        left++;</span><br><span class=\"line\">      <span class=\"keyword\">else</span></span><br><span class=\"line\">        right--;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// console.log('closest:', closest);</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> closest;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"18-4Sum\"><a href=\"#18-4Sum\" class=\"headerlink\" title=\"[18] 4Sum\"></a>[18] 4Sum</h4><blockquote>\n<p>Given an array <code>nums</code> of <em>n</em> integers and an integer <code>target</code>, are there elements <em>a</em>, <em>b</em>, <em>c</em>, and <em>d</em>in <code>nums</code> such that <em>a</em> + <em>b</em> + <em>c</em> + <em>d</em> = <code>target</code>? Find all unique quadruplets in the array which gives the sum of <code>target</code>.</p>\n<p><strong>Note:</strong></p>\n<p>The solution set must not contain duplicate quadruplets.</p>\n</blockquote>\n<p>有了双指针, nSum都可解, 不过这个嵌套有点多,估计有更巧妙的解法.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> fourSum = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">nums, target</span>) </span>&#123;</span><br><span class=\"line\">  nums = nums.sort(<span class=\"function\">(<span class=\"params\">a, b</span>) =&gt;</span> a - b);</span><br><span class=\"line\">  <span class=\"keyword\">let</span> len = nums.length, res = [];</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; len - <span class=\"number\">3</span>; i++) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 去重</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (nums[i] == nums[i - <span class=\"number\">1</span>] &amp;&amp; i &gt; <span class=\"number\">0</span>)</span><br><span class=\"line\">      <span class=\"keyword\">continue</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> j = i + <span class=\"number\">1</span>; j &lt; len - <span class=\"number\">2</span>; j++) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (nums[j] == nums[j - <span class=\"number\">1</span>] &amp;&amp; j &gt; i + <span class=\"number\">1</span>)</span><br><span class=\"line\">        <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">        </span><br><span class=\"line\">      <span class=\"keyword\">let</span> t = target - nums[i] - nums[j];</span><br><span class=\"line\">      <span class=\"keyword\">let</span> left = j + <span class=\"number\">1</span>, right = len - <span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">while</span> (left &lt; right) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> twoSum = nums[left] + nums[right];</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (twoSum == t) &#123;</span><br><span class=\"line\">          res.push([nums[i], nums[j], nums[left], nums[right]]);</span><br><span class=\"line\">          left++;</span><br><span class=\"line\">          right--;</span><br><span class=\"line\">          <span class=\"comment\">// 去重</span></span><br><span class=\"line\">          <span class=\"keyword\">while</span> (left &lt; right &amp;&amp; nums[left] == nums[left - <span class=\"number\">1</span>])</span><br><span class=\"line\">            left++;</span><br><span class=\"line\">          <span class=\"keyword\">while</span> (left &lt; right &amp;&amp; nums[right] == nums[right + <span class=\"number\">1</span>])</span><br><span class=\"line\">            right--;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (twoSum &gt; t) &#123;</span><br><span class=\"line\">          right--;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">          left++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// console.log(res);</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"283-Move-Zeroes\"><a href=\"#283-Move-Zeroes\" class=\"headerlink\" title=\"[283] Move Zeroes\"></a>[283] Move Zeroes</h4><blockquote>\n<p>Given an array <code>nums</code>, write a function to move all <code>0</code>‘s to the end of it while maintaining the relative order of the non-zero elements.</p>\n<p><strong>Note</strong>:</p>\n<ol>\n<li>You must do this <strong>in-place</strong> without making a copy of the array.</li>\n<li>Minimize the total number of operations.</li>\n</ol>\n</blockquote>\n<p>双指针解法, 一次成功.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// solution: two pointers</span></span><br><span class=\"line\"><span class=\"comment\">// 借鉴之前的做题经验, 这题算是完成的比较快</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> moveZeroes = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">nums</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> len = nums.length, i = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> j = <span class=\"number\">0</span>; j &lt; len; j++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (nums[j] != <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">      nums[i] = nums[j];</span><br><span class=\"line\">      i++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> t = i; t &lt; len; t++) &#123;</span><br><span class=\"line\">    nums[t] = <span class=\"number\">0</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// console.log(nums);</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> nums;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"66-Plus-One\"><a href=\"#66-Plus-One\" class=\"headerlink\" title=\"[66] Plus One\"></a>[66] Plus One</h4><blockquote>\n<p>Given a <strong>non-empty</strong> array of digits representing a non-negative integer, increment one to the integer.</p>\n<p>The digits are stored such that the most significant digit is at the head of the list, and each element in the array contains a single digit.</p>\n<p>You may assume the integer does not contain any leading zero, except the number 0 itself.</p>\n</blockquote>\n<p>主要是运用数组特性.不是很难, 理解题意即可.</p>\n<p>还挺多人不喜欢这道题的, 可能觉得太弱智了?…</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> plusOne = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">digits</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> len = digits.length;</span><br><span class=\"line\">  <span class=\"comment\">// c 表示进位</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> i = len - <span class=\"number\">1</span>, c = <span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"keyword\">while</span> (i &gt;= <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 没有向前进位, 就 +1 结束</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (digits[i] + c &lt; <span class=\"number\">10</span>) &#123;</span><br><span class=\"line\">      digits[i]++;</span><br><span class=\"line\">      <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (i == <span class=\"number\">0</span>) &#123; </span><br><span class=\"line\">      <span class=\"comment\">// 首位元素 +1 后有进位, 向数组头部插入 1 结束</span></span><br><span class=\"line\">      digits[i] = <span class=\"number\">0</span>;</span><br><span class=\"line\">      digits.unshift(<span class=\"number\">1</span>);</span><br><span class=\"line\">      <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 不是首位元素 +1 后有进位</span></span><br><span class=\"line\">      <span class=\"comment\">// 当前元素设为 0 , 继续看更高位元素</span></span><br><span class=\"line\">      digits[i] = <span class=\"number\">0</span>;</span><br><span class=\"line\">      i--;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// console.log(digits);</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> digits;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"88-Merge-Sorted-Array\"><a href=\"#88-Merge-Sorted-Array\" class=\"headerlink\" title=\"[88] Merge Sorted Array\"></a>[88] Merge Sorted Array</h4><blockquote>\n<p>Given two sorted integer arrays <em>nums1</em> and <em>nums2</em>, merge <em>nums2</em> into <em>nums1</em> as one sorted array.</p>\n<p><strong>Note:</strong></p>\n<ul>\n<li>The number of elements initialized in <em>nums1</em> and <em>nums2</em> are <em>m</em>and <em>n</em> respectively.</li>\n<li>You may assume that <em>nums1</em> has enough space (size that is <strong>equal</strong> to <em>m</em> + <em>n</em>) to hold additional elements from <em>nums2</em>.</li>\n</ul>\n</blockquote>\n<p>我用的方法比较死板, 感觉没有什么难度. 就是分情况讨论. </p>\n<p>不过用到了 js 里 Array 的特性.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> merge = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">nums1, m, nums2, n</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 说明没有自己的元素</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (m == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; n; i++) &#123;</span><br><span class=\"line\">            nums1[i] = nums2[i];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> len = nums1.length;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> i = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> j = m;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> k = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (i &lt; len &amp;&amp; k &lt; n) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (nums2[k] &gt;= nums1[i] &amp;&amp; nums2[k] &lt; nums1[i + <span class=\"number\">1</span>]) &#123;</span><br><span class=\"line\">                nums1.splice(i + <span class=\"number\">1</span>, <span class=\"number\">0</span>, nums2[k]);</span><br><span class=\"line\">                nums1.pop();</span><br><span class=\"line\">                j++;</span><br><span class=\"line\">                k++;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (nums2[k] &gt;= nums1[j - <span class=\"number\">1</span>]) &#123;</span><br><span class=\"line\">                nums1[j] = nums2[k];</span><br><span class=\"line\">                j++;</span><br><span class=\"line\">                k++;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (nums2[k] &lt;= nums1[<span class=\"number\">0</span>]) &#123;</span><br><span class=\"line\">                nums1.unshift(nums2[k]);</span><br><span class=\"line\">                nums1.pop();</span><br><span class=\"line\">                j++;</span><br><span class=\"line\">                k++;</span><br><span class=\"line\">                i = <span class=\"number\">0</span>;</span><br><span class=\"line\">                <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            i++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n"},{"title":"Hello World","abbrlink":"4a17b156","_content":"Welcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/one-command-deployment.html)\n","source":"_posts/hello-world.md","raw":"---\ntitle: Hello World\nabbrlink: 4a17b156\n---\nWelcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/one-command-deployment.html)\n","slug":"hello-world","published":1,"date":"2020-07-28T10:22:25.188Z","updated":"2020-07-28T15:24:05.684Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckdyb5wcq000s5z9ha1qe2xru","content":"<p>Welcome to <a href=\"https://hexo.io/\" target=\"_blank\" rel=\"noopener\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\" target=\"_blank\" rel=\"noopener\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\" target=\"_blank\" rel=\"noopener\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\" target=\"_blank\" rel=\"noopener\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"noopener\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"noopener\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"noopener\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/one-command-deployment.html\" target=\"_blank\" rel=\"noopener\">Deployment</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>Welcome to <a href=\"https://hexo.io/\" target=\"_blank\" rel=\"noopener\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\" target=\"_blank\" rel=\"noopener\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\" target=\"_blank\" rel=\"noopener\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\" target=\"_blank\" rel=\"noopener\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"noopener\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"noopener\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"noopener\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/one-command-deployment.html\" target=\"_blank\" rel=\"noopener\">Deployment</a></p>\n"}],"PostAsset":[{"_id":"source/_posts/Permutations-Combinations-Subsets/bitmask4.png","post":"ckdyb5wbp00045z9h4qahe6xm","slug":"bitmask4.png","modified":1,"renderable":1},{"_id":"source/_posts/Greedy-Algorithm/45_fig1.png","post":"ckdyb5wbm00015z9h5fp86lkh","slug":"45_fig1.png","modified":1,"renderable":1},{"_id":"source/_posts/Greedy-Algorithm/largen-reach.png","post":"ckdyb5wbm00015z9h5fp86lkh","slug":"largen-reach.png","modified":1,"renderable":1}],"PostCategory":[{"post_id":"ckdyb5wbq00055z9h2y0req61","category_id":"ckdyb5wbn00025z9h94xd2gh4","_id":"ckdyb5wbu000c5z9hbumaahoe"},{"post_id":"ckdyb5wbg00005z9h7ta7fq72","category_id":"ckdyb5wbn00025z9h94xd2gh4","_id":"ckdyb5wbv000g5z9h9x86bxlc"},{"post_id":"ckdyb5wbt000a5z9h6nxp0fn9","category_id":"ckdyb5wbn00025z9h94xd2gh4","_id":"ckdyb5wbw000h5z9hblfr3p0m"},{"post_id":"ckdyb5wbm00015z9h5fp86lkh","category_id":"ckdyb5wbn00025z9h94xd2gh4","_id":"ckdyb5wbx000j5z9h8110hwg6"},{"post_id":"ckdyb5wbr00065z9ha2u2dh2f","category_id":"ckdyb5wbu000d5z9h3t2t7mp4","_id":"ckdyb5wbx000k5z9h07r82e6v"}],"PostTag":[{"post_id":"ckdyb5wbq00055z9h2y0req61","tag_id":"ckdyb5wbo00035z9h4ee4dawe","_id":"ckdyb5wbt00095z9h3ccp3uhk"},{"post_id":"ckdyb5wbg00005z9h7ta7fq72","tag_id":"ckdyb5wbo00035z9h4ee4dawe","_id":"ckdyb5wbu000b5z9hfx5s49mk"},{"post_id":"ckdyb5wbm00015z9h5fp86lkh","tag_id":"ckdyb5wbo00035z9h4ee4dawe","_id":"ckdyb5wbv000f5z9ha253991o"},{"post_id":"ckdyb5wbr00065z9ha2u2dh2f","tag_id":"ckdyb5wbu000e5z9h4m932q6u","_id":"ckdyb5wby000m5z9hgvos9j9s"},{"post_id":"ckdyb5wbr00065z9ha2u2dh2f","tag_id":"ckdyb5wbw000i5z9h94go2h07","_id":"ckdyb5wby000n5z9h4tzicj3u"},{"post_id":"ckdyb5wbt000a5z9h6nxp0fn9","tag_id":"ckdyb5wbo00035z9h4ee4dawe","_id":"ckdyb5wbz000p5z9hes6d9mg0"},{"post_id":"ckdyb5wbt000a5z9h6nxp0fn9","tag_id":"ckdyb5wbx000l5z9h11hthmyp","_id":"ckdyb5wc0000q5z9hf0la7c9q"},{"post_id":"ckdyb5wbt000a5z9h6nxp0fn9","tag_id":"ckdyb5wby000o5z9hgm1y94um","_id":"ckdyb5wc0000r5z9h2wl7cqjr"}],"Tag":[{"name":"LeetCode","_id":"ckdyb5wbo00035z9h4ee4dawe"},{"name":"Vue","_id":"ckdyb5wbu000e5z9h4m932q6u"},{"name":"js","_id":"ckdyb5wbw000i5z9h94go2h07"},{"name":"array","_id":"ckdyb5wbx000l5z9h11hthmyp"},{"name":"two-pointers","_id":"ckdyb5wby000o5z9hgm1y94um"}]}}